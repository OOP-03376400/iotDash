//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(iotDbConnector.DAL.iotContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets2372b9ce34bfd99ca5cad5280ea2b78f7845dd41e1440587df8b31daf2e9456f))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets2372b9ce34bfd99ca5cad5280ea2b78f7845dd41e1440587df8b31daf2e9456f : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "2372b9ce34bfd99ca5cad5280ea2b78f7845dd41e1440587df8b31daf2e9456f"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ActionParameter")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.DeviceAction")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Device")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.DeviceCredentials")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.AppAuthLevel")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Location")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.iotDomain")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.DeviceType")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.Site")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.EndpointInfo")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.DeviceProperty")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.DeviceParameter")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.ParameterChangeHistory")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.sconnConfigMapper")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.ParameterType")
            {
                return GetView14();
            }

            if (extentName == "iotContext.ActionParameters")
            {
                return GetView15();
            }

            if (extentName == "iotContext.DeviceAction_RequiredParameters")
            {
                return GetView16();
            }

            if (extentName == "iotContext.ActionParameter_Type")
            {
                return GetView17();
            }

            if (extentName == "iotContext.Actions")
            {
                return GetView18();
            }

            if (extentName == "iotContext.DeviceAction_Device")
            {
                return GetView19();
            }

            if (extentName == "iotContext.Devices")
            {
                return GetView20();
            }

            if (extentName == "iotContext.DeviceCredentials_Devices")
            {
                return GetView21();
            }

            if (extentName == "iotContext.Site_Devices")
            {
                return GetView22();
            }

            if (extentName == "iotContext.Device_DeviceLocation")
            {
                return GetView23();
            }

            if (extentName == "iotContext.Device_Type")
            {
                return GetView24();
            }

            if (extentName == "iotContext.Credentials")
            {
                return GetView25();
            }

            if (extentName == "iotContext.AppAuthLevel_Credentials")
            {
                return GetView26();
            }

            if (extentName == "iotContext.AppAuthLevels")
            {
                return GetView27();
            }

            if (extentName == "iotContext.Locations")
            {
                return GetView28();
            }

            if (extentName == "iotContext.iotDomain_Locations")
            {
                return GetView29();
            }

            if (extentName == "iotContext.Domains")
            {
                return GetView30();
            }

            if (extentName == "iotContext.Types")
            {
                return GetView31();
            }

            if (extentName == "iotContext.DeviceType_Domain")
            {
                return GetView32();
            }

            if (extentName == "iotContext.Sites")
            {
                return GetView33();
            }

            if (extentName == "iotContext.Site_Domain")
            {
                return GetView34();
            }

            if (extentName == "iotContext.Site_siteLocation")
            {
                return GetView35();
            }

            if (extentName == "iotContext.Endpoints")
            {
                return GetView36();
            }

            if (extentName == "iotContext.Properties")
            {
                return GetView37();
            }

            if (extentName == "iotContext.DeviceProperty_Device")
            {
                return GetView38();
            }

            if (extentName == "iotContext.Parameters")
            {
                return GetView39();
            }

            if (extentName == "iotContext.DeviceParameter_Action")
            {
                return GetView40();
            }

            if (extentName == "iotContext.DeviceParameter_Property")
            {
                return GetView41();
            }

            if (extentName == "iotContext.DeviceParameter_Type")
            {
                return GetView42();
            }

            if (extentName == "iotContext.ParameterChanges")
            {
                return GetView43();
            }

            if (extentName == "iotContext.ParameterChangeHistory_Property")
            {
                return GetView44();
            }

            if (extentName == "iotContext.SconnMappers")
            {
                return GetView45();
            }

            if (extentName == "iotContext.sconnConfigMapper_ActionParam")
            {
                return GetView46();
            }

            if (extentName == "iotContext.sconnConfigMapper_Parameter")
            {
                return GetView47();
            }

            if (extentName == "iotContext.ParamTypes")
            {
                return GetView48();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ActionParameter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ActionParameter
        [CodeFirstDatabaseSchema.ActionParameter](T5.ActionParameter_Id, T5.ActionParameter_Value, T5.ActionParameter_ParamDescription, T5.ActionParameter_VisualRepresentationUrl, T5.[ActionParameter.Action_Id], T5.[ActionParameter.Type_Id])
    FROM (
        SELECT T3.ActionParameter_Id, T3.ActionParameter_Value, T3.ActionParameter_ParamDescription, T3.ActionParameter_VisualRepresentationUrl, T4.[ActionParameter.Action_Id], T3.[ActionParameter.Type_Id], T3._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, T3._from2
        FROM  (
            SELECT T1.ActionParameter_Id, T2.ActionParameter_Value, T2.ActionParameter_ParamDescription, T2.ActionParameter_VisualRepresentationUrl, T1.[ActionParameter.Type_Id], T2._from0, T1._from2
            FROM  (
                SELECT 
                    Key(T.ActionParameter_Type_Source).Id AS ActionParameter_Id, 
                    Key(T.ActionParameter_Type_Target).Id AS [ActionParameter.Type_Id], 
                    True AS _from2
                FROM iotContext.ActionParameter_Type AS T) AS T1
                INNER JOIN (
                SELECT 
                    T.Id AS ActionParameter_Id, 
                    T.[Value] AS ActionParameter_Value, 
                    T.ParamDescription AS ActionParameter_ParamDescription, 
                    T.VisualRepresentationUrl AS ActionParameter_VisualRepresentationUrl, 
                    True AS _from0
                FROM iotContext.ActionParameters AS T) AS T2
                ON T1.ActionParameter_Id = T2.ActionParameter_Id) AS T3
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DeviceAction_RequiredParameters_Target).Id AS ActionParameter_Id, 
                Key(T.DeviceAction_RequiredParameters_Source).Id AS [ActionParameter.Action_Id], 
                True AS _from1
            FROM iotContext.DeviceAction_RequiredParameters AS T) AS T4
            ON T3.ActionParameter_Id = T4.ActionParameter_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DeviceAction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceAction
        [CodeFirstDatabaseSchema.DeviceAction](T3.DeviceAction_Id, T3.DeviceAction_ActionName, T3.DeviceAction_ActionDescription, T3.DeviceAction_VisualRepresentationURL, T3.DeviceAction_LastActivationTime, T3.[DeviceAction.Device_Id])
    FROM (
        SELECT T1.DeviceAction_Id, T2.DeviceAction_ActionName, T2.DeviceAction_ActionDescription, T2.DeviceAction_VisualRepresentationURL, T2.DeviceAction_LastActivationTime, T1.[DeviceAction.Device_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.DeviceAction_Device_Source).Id AS DeviceAction_Id, 
                Key(T.DeviceAction_Device_Target).Id AS [DeviceAction.Device_Id], 
                True AS _from1
            FROM iotContext.DeviceAction_Device AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS DeviceAction_Id, 
                T.ActionName AS DeviceAction_ActionName, 
                T.ActionDescription AS DeviceAction_ActionDescription, 
                T.VisualRepresentationURL AS DeviceAction_VisualRepresentationURL, 
                T.LastActivationTime AS DeviceAction_LastActivationTime, 
                True AS _from0
            FROM iotContext.Actions AS T) AS T2
            ON T1.DeviceAction_Id = T2.DeviceAction_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Device.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Device
        [CodeFirstDatabaseSchema.Device](T7.Device_Id, T7.Device_DeviceName, T7.[Device.Credentials_CredentialId], T7.[Device.Site_Id], T7.[Device.DeviceLocation_Id], T7.[Device.Type_Id])
    FROM (
        SELECT T4.Device_Id, T4.Device_DeviceName, T6.[Device.Credentials_CredentialId], T5.[Device.Site_Id], T4.[Device.DeviceLocation_Id], T4.[Device.Type_Id], (T6._from0 AND T6._from0 IS NOT NULL) AS _from0, (T5._from1 AND T5._from1 IS NOT NULL) AS _from1, T4._from2, T4._from3, T4._from4
        FROM  (
            SELECT T1.Device_Id, T2.Device_DeviceName, T3.[Device.DeviceLocation_Id], T1.[Device.Type_Id], T2._from2, T3._from3, T1._from4
            FROM  (
                SELECT 
                    Key(T.Device_Type_Source).Id AS Device_Id, 
                    Key(T.Device_Type_Target).Id AS [Device.Type_Id], 
                    True AS _from4
                FROM iotContext.Device_Type AS T) AS T1
                INNER JOIN (
                SELECT 
                    T.Id AS Device_Id, 
                    T.DeviceName AS Device_DeviceName, 
                    True AS _from2
                FROM iotContext.Devices AS T) AS T2
                ON T1.Device_Id = T2.Device_Id
                INNER JOIN (
                SELECT 
                    Key(T.Device_DeviceLocation_Source).Id AS Device_Id, 
                    Key(T.Device_DeviceLocation_Target).Id AS [Device.DeviceLocation_Id], 
                    True AS _from3
                FROM iotContext.Device_DeviceLocation AS T) AS T3
                ON T1.Device_Id = T3.Device_Id) AS T4
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Site_Devices_Target).Id AS Device_Id, 
                Key(T.Site_Devices_Source).Id AS [Device.Site_Id], 
                True AS _from1
            FROM iotContext.Site_Devices AS T) AS T5
            ON T4.Device_Id = T5.Device_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DeviceCredentials_Devices_Target).Id AS Device_Id, 
                Key(T.DeviceCredentials_Devices_Source).CredentialId AS [Device.Credentials_CredentialId], 
                True AS _from0
            FROM iotContext.DeviceCredentials_Devices AS T) AS T6
            ON T4.Device_Id = T6.Device_Id
    ) AS T7");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DeviceCredentials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceCredentials
        [CodeFirstDatabaseSchema.DeviceCredentials](T3.DeviceCredentials_CredentialId, T3.DeviceCredentials_Username, T3.DeviceCredentials_Password, T3.DeviceCredentials_HashData, T3.DeviceCredentials_PermissionExpireDate, T3.DeviceCredentials_PasswordExpireDate, T3.[DeviceCredentials.AuthLevel_AppAuthLevelId])
    FROM (
        SELECT T1.DeviceCredentials_CredentialId, T1.DeviceCredentials_Username, T1.DeviceCredentials_Password, T1.DeviceCredentials_HashData, T1.DeviceCredentials_PermissionExpireDate, T1.DeviceCredentials_PasswordExpireDate, T2.[DeviceCredentials.AuthLevel_AppAuthLevelId], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.CredentialId AS DeviceCredentials_CredentialId, 
                T.Username AS DeviceCredentials_Username, 
                T.Password AS DeviceCredentials_Password, 
                T.HashData AS DeviceCredentials_HashData, 
                T.PermissionExpireDate AS DeviceCredentials_PermissionExpireDate, 
                T.PasswordExpireDate AS DeviceCredentials_PasswordExpireDate, 
                True AS _from0
            FROM iotContext.Credentials AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.AppAuthLevel_Credentials_Target).CredentialId AS DeviceCredentials_CredentialId, 
                Key(T.AppAuthLevel_Credentials_Source).AppAuthLevelId AS [DeviceCredentials.AuthLevel_AppAuthLevelId], 
                True AS _from1
            FROM iotContext.AppAuthLevel_Credentials AS T) AS T2
            ON T1.DeviceCredentials_CredentialId = T2.DeviceCredentials_CredentialId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AppAuthLevel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AppAuthLevel
        [CodeFirstDatabaseSchema.AppAuthLevel](T1.AppAuthLevel_AppAuthLevelId, T1.AppAuthLevel_Write, T1.AppAuthLevel_Read)
    FROM (
        SELECT 
            T.AppAuthLevelId AS AppAuthLevel_AppAuthLevelId, 
            T.Write AS AppAuthLevel_Write, 
            T.Read AS AppAuthLevel_Read, 
            True AS _from0
        FROM iotContext.AppAuthLevels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Location.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Location
        [CodeFirstDatabaseSchema.Location](T3.Location_Id, T3.Location_LocationName, T3.Location_Lat, T3.Location_Lng, T3.Location_LocationVisualRepresentationURL, T3.[Location.Domain_Id])
    FROM (
        SELECT T1.Location_Id, T1.Location_LocationName, T1.Location_Lat, T1.Location_Lng, T1.Location_LocationVisualRepresentationURL, T2.[Location.Domain_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Location_Id, 
                T.LocationName AS Location_LocationName, 
                T.Lat AS Location_Lat, 
                T.Lng AS Location_Lng, 
                T.LocationVisualRepresentationURL AS Location_LocationVisualRepresentationURL, 
                True AS _from0
            FROM iotContext.Locations AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.iotDomain_Locations_Target).Id AS Location_Id, 
                Key(T.iotDomain_Locations_Source).Id AS [Location.Domain_Id], 
                True AS _from1
            FROM iotContext.iotDomain_Locations AS T) AS T2
            ON T1.Location_Id = T2.Location_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.iotDomain.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing iotDomain
        [CodeFirstDatabaseSchema.iotDomain](T1.iotDomain_Id, T1.iotDomain_DomainName)
    FROM (
        SELECT 
            T.Id AS iotDomain_Id, 
            T.DomainName AS iotDomain_DomainName, 
            True AS _from0
        FROM iotContext.Domains AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DeviceType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceType
        [CodeFirstDatabaseSchema.DeviceType](T3.DeviceType_Id, T3.DeviceType_TypeName, T3.DeviceType_TypeDescription, T3.DeviceType_VisualRepresentationURL, T3.[DeviceType.Domain_Id])
    FROM (
        SELECT T1.DeviceType_Id, T2.DeviceType_TypeName, T2.DeviceType_TypeDescription, T2.DeviceType_VisualRepresentationURL, T1.[DeviceType.Domain_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.DeviceType_Domain_Source).Id AS DeviceType_Id, 
                Key(T.DeviceType_Domain_Target).Id AS [DeviceType.Domain_Id], 
                True AS _from1
            FROM iotContext.DeviceType_Domain AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS DeviceType_Id, 
                T.TypeName AS DeviceType_TypeName, 
                T.TypeDescription AS DeviceType_TypeDescription, 
                T.VisualRepresentationURL AS DeviceType_VisualRepresentationURL, 
                True AS _from0
            FROM iotContext.Types AS T) AS T2
            ON T1.DeviceType_Id = T2.DeviceType_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Site.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Site
        [CodeFirstDatabaseSchema.Site](T5.Site_Id, T5.Site_SiteName, T5.[Site.Domain_Id], T5.[Site.siteLocation_Id])
    FROM (
        SELECT T3.Site_Id, T3.Site_SiteName, T3.[Site.Domain_Id], T4.[Site.siteLocation_Id], T3._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, T3._from2
        FROM  (
            SELECT T1.Site_Id, T1.Site_SiteName, T2.[Site.Domain_Id], T2._from0, T1._from2
            FROM  (
                SELECT 
                    T.Id AS Site_Id, 
                    T.SiteName AS Site_SiteName, 
                    True AS _from2
                FROM iotContext.Sites AS T) AS T1
                INNER JOIN (
                SELECT 
                    Key(T.Site_Domain_Source).Id AS Site_Id, 
                    Key(T.Site_Domain_Target).Id AS [Site.Domain_Id], 
                    True AS _from0
                FROM iotContext.Site_Domain AS T) AS T2
                ON T1.Site_Id = T2.Site_Id) AS T3
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Site_siteLocation_Source).Id AS Site_Id, 
                Key(T.Site_siteLocation_Target).Id AS [Site.siteLocation_Id], 
                True AS _from1
            FROM iotContext.Site_siteLocation AS T) AS T4
            ON T3.Site_Id = T4.Site_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EndpointInfo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EndpointInfo
        [CodeFirstDatabaseSchema.EndpointInfo](T1.EndpointInfo_Id, T1.EndpointInfo_Hostname, T1.EndpointInfo_Port, T1.EndpointInfo_RequiresAuthentication, T1.EndpointInfo_SupportsAllJoynProtocol, T1.EndpointInfo_SupportsCoAPProtocol, T1.EndpointInfo_SupportsMQTTProtocol, T1.EndpointInfo_SupportsRESTfulProtocol, T1.EndpointInfo_SupportsSconnProtocol, T1.EndpointInfo_SupportsOnvifProtocol)
    FROM (
        SELECT 
            T.Id AS EndpointInfo_Id, 
            T.Hostname AS EndpointInfo_Hostname, 
            T.Port AS EndpointInfo_Port, 
            T.RequiresAuthentication AS EndpointInfo_RequiresAuthentication, 
            T.SupportsAllJoynProtocol AS EndpointInfo_SupportsAllJoynProtocol, 
            T.SupportsCoAPProtocol AS EndpointInfo_SupportsCoAPProtocol, 
            T.SupportsMQTTProtocol AS EndpointInfo_SupportsMQTTProtocol, 
            T.SupportsRESTfulProtocol AS EndpointInfo_SupportsRESTfulProtocol, 
            T.SupportsSconnProtocol AS EndpointInfo_SupportsSconnProtocol, 
            T.SupportsOnvifProtocol AS EndpointInfo_SupportsOnvifProtocol, 
            True AS _from0
        FROM iotContext.Endpoints AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DeviceProperty.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceProperty
        [CodeFirstDatabaseSchema.DeviceProperty](T3.DeviceProperty_Id, T3.DeviceProperty_PropertyName, T3.DeviceProperty_PropertyDescription, T3.DeviceProperty_VisualRepresentationURL, T3.DeviceProperty_LastUpdateTime, T3.[DeviceProperty.Device_Id])
    FROM (
        SELECT T1.DeviceProperty_Id, T2.DeviceProperty_PropertyName, T2.DeviceProperty_PropertyDescription, T2.DeviceProperty_VisualRepresentationURL, T2.DeviceProperty_LastUpdateTime, T1.[DeviceProperty.Device_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.DeviceProperty_Device_Source).Id AS DeviceProperty_Id, 
                Key(T.DeviceProperty_Device_Target).Id AS [DeviceProperty.Device_Id], 
                True AS _from1
            FROM iotContext.DeviceProperty_Device AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS DeviceProperty_Id, 
                T.PropertyName AS DeviceProperty_PropertyName, 
                T.PropertyDescription AS DeviceProperty_PropertyDescription, 
                T.VisualRepresentationURL AS DeviceProperty_VisualRepresentationURL, 
                T.LastUpdateTime AS DeviceProperty_LastUpdateTime, 
                True AS _from0
            FROM iotContext.Properties AS T) AS T2
            ON T1.DeviceProperty_Id = T2.DeviceProperty_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DeviceParameter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceParameter
        [CodeFirstDatabaseSchema.DeviceParameter](T6.DeviceParameter_Id, T6.DeviceParameter_Value, T6.DeviceParameter_ParamDescription, T6.DeviceParameter_VisualRepresentationUrl, T6.[DeviceParameter.Action_Id], T6.[DeviceParameter.Property_Id], T6.[DeviceParameter.Type_Id])
    FROM (
        SELECT T3.DeviceParameter_Id, T3.DeviceParameter_Value, T3.DeviceParameter_ParamDescription, T3.DeviceParameter_VisualRepresentationUrl, T4.[DeviceParameter.Action_Id], T5.[DeviceParameter.Property_Id], T3.[DeviceParameter.Type_Id], T3._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, (T5._from2 AND T5._from2 IS NOT NULL) AS _from2, T3._from3
        FROM  (
            SELECT T1.DeviceParameter_Id, T2.DeviceParameter_Value, T2.DeviceParameter_ParamDescription, T2.DeviceParameter_VisualRepresentationUrl, T1.[DeviceParameter.Type_Id], T2._from0, T1._from3
            FROM  (
                SELECT 
                    Key(T.DeviceParameter_Type_Source).Id AS DeviceParameter_Id, 
                    Key(T.DeviceParameter_Type_Target).Id AS [DeviceParameter.Type_Id], 
                    True AS _from3
                FROM iotContext.DeviceParameter_Type AS T) AS T1
                INNER JOIN (
                SELECT 
                    T.Id AS DeviceParameter_Id, 
                    T.[Value] AS DeviceParameter_Value, 
                    T.ParamDescription AS DeviceParameter_ParamDescription, 
                    T.VisualRepresentationUrl AS DeviceParameter_VisualRepresentationUrl, 
                    True AS _from0
                FROM iotContext.Parameters AS T) AS T2
                ON T1.DeviceParameter_Id = T2.DeviceParameter_Id) AS T3
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DeviceParameter_Action_Source).Id AS DeviceParameter_Id, 
                Key(T.DeviceParameter_Action_Target).Id AS [DeviceParameter.Action_Id], 
                True AS _from1
            FROM iotContext.DeviceParameter_Action AS T) AS T4
            ON T3.DeviceParameter_Id = T4.DeviceParameter_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DeviceParameter_Property_Source).Id AS DeviceParameter_Id, 
                Key(T.DeviceParameter_Property_Target).Id AS [DeviceParameter.Property_Id], 
                True AS _from2
            FROM iotContext.DeviceParameter_Property AS T) AS T5
            ON T3.DeviceParameter_Id = T5.DeviceParameter_Id
    ) AS T6");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ParameterChangeHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParameterChangeHistory
        [CodeFirstDatabaseSchema.ParameterChangeHistory](T3.ParameterChangeHistory_ParameterChangeId, T3.ParameterChangeHistory_Date, T3.ParameterChangeHistory_Value, T3.[ParameterChangeHistory.Property_Id])
    FROM (
        SELECT T1.ParameterChangeHistory_ParameterChangeId, T2.ParameterChangeHistory_Date, T2.ParameterChangeHistory_Value, T1.[ParameterChangeHistory.Property_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.ParameterChangeHistory_Property_Source).ParameterChangeId AS ParameterChangeHistory_ParameterChangeId, 
                Key(T.ParameterChangeHistory_Property_Target).Id AS [ParameterChangeHistory.Property_Id], 
                True AS _from1
            FROM iotContext.ParameterChangeHistory_Property AS T) AS T1
            INNER JOIN (
            SELECT 
                T.ParameterChangeId AS ParameterChangeHistory_ParameterChangeId, 
                T.Date AS ParameterChangeHistory_Date, 
                T.[Value] AS ParameterChangeHistory_Value, 
                True AS _from0
            FROM iotContext.ParameterChanges AS T) AS T2
            ON T1.ParameterChangeHistory_ParameterChangeId = T2.ParameterChangeHistory_ParameterChangeId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.sconnConfigMapper.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sconnConfigMapper
        [CodeFirstDatabaseSchema.sconnConfigMapper](T4.sconnConfigMapper_MapperId, T4.sconnConfigMapper_ConfigType, T4.sconnConfigMapper_SeqNumber, T4.[sconnConfigMapper.ActionParam_Id], T4.[sconnConfigMapper.Parameter_Id])
    FROM (
        SELECT T1.sconnConfigMapper_MapperId, T1.sconnConfigMapper_ConfigType, T1.sconnConfigMapper_SeqNumber, T2.[sconnConfigMapper.ActionParam_Id], T3.[sconnConfigMapper.Parameter_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.MapperId AS sconnConfigMapper_MapperId, 
                T.ConfigType AS sconnConfigMapper_ConfigType, 
                T.SeqNumber AS sconnConfigMapper_SeqNumber, 
                True AS _from0
            FROM iotContext.SconnMappers AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.sconnConfigMapper_ActionParam_Source).MapperId AS sconnConfigMapper_MapperId, 
                Key(T.sconnConfigMapper_ActionParam_Target).Id AS [sconnConfigMapper.ActionParam_Id], 
                True AS _from1
            FROM iotContext.sconnConfigMapper_ActionParam AS T) AS T2
            ON T1.sconnConfigMapper_MapperId = T2.sconnConfigMapper_MapperId
            LEFT OUTER JOIN (
            SELECT 
                Key(T.sconnConfigMapper_Parameter_Source).MapperId AS sconnConfigMapper_MapperId, 
                Key(T.sconnConfigMapper_Parameter_Target).Id AS [sconnConfigMapper.Parameter_Id], 
                True AS _from2
            FROM iotContext.sconnConfigMapper_Parameter AS T) AS T3
            ON T1.sconnConfigMapper_MapperId = T3.sconnConfigMapper_MapperId
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ParameterType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParameterType
        [CodeFirstDatabaseSchema.ParameterType](T1.ParameterType_Id, T1.ParameterType_Name, T1.ParameterType_Description, T1.ParameterType_DocumentationURL)
    FROM (
        SELECT 
            T.Id AS ParameterType_Id, 
            T.Name AS ParameterType_Name, 
            T.Description AS ParameterType_Description, 
            T.DocumentationURL AS ParameterType_DocumentationURL, 
            True AS _from0
        FROM iotContext.ParamTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.ActionParameters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ActionParameters
        [iotDbConnector.DAL.ActionParameter](T1.ActionParameter_Id, T1.ActionParameter_Value, T1.ActionParameter_ParamDescription, T1.ActionParameter_VisualRepresentationUrl) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Actions, ROW(T1.[DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Source.Id]),[iotDbConnector.DAL.DeviceAction]),[iotDbConnector.DAL.DeviceAction_RequiredParameters],DeviceAction_RequiredParameters_Target,DeviceAction_RequiredParameters_Source) 
        RELATIONSHIP(CREATEREF(iotContext.ParamTypes, ROW(T1.[ActionParameter_Type.ActionParameter_Type_Target.Id]),[iotDbConnector.DAL.ParameterType]),[iotDbConnector.DAL.ActionParameter_Type],ActionParameter_Type_Source,ActionParameter_Type_Target) 
    FROM (
        SELECT 
            T.Id AS ActionParameter_Id, 
            T.[Value] AS ActionParameter_Value, 
            T.ParamDescription AS ActionParameter_ParamDescription, 
            T.VisualRepresentationUrl AS ActionParameter_VisualRepresentationUrl, 
            True AS _from0, 
            T.Action_Id AS [DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Source.Id], 
            T.Type_Id AS [ActionParameter_Type.ActionParameter_Type_Target.Id]
        FROM CodeFirstDatabase.ActionParameter AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceAction_RequiredParameters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceAction_RequiredParameters
        [iotDbConnector.DAL.DeviceAction_RequiredParameters](T3.[DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Source], T3.[DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Target])
    FROM (
        SELECT -- Constructing DeviceAction_RequiredParameters_Source
            CreateRef(iotContext.Actions, row(T2.[DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Source.Id]), [iotDbConnector.DAL.DeviceAction]) AS [DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Source], 
            T2.[DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Target]
        FROM (
            SELECT -- Constructing DeviceAction_RequiredParameters_Target
                T1.[DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Source.Id], 
                CreateRef(iotContext.ActionParameters, row(T1.[DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Target.Id]), [iotDbConnector.DAL.ActionParameter]) AS [DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Target]
            FROM (
                SELECT 
                    T.Action_Id AS [DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Source.Id], 
                    T.Id AS [DeviceAction_RequiredParameters.DeviceAction_RequiredParameters_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.ActionParameter AS T
                WHERE T.Action_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.ActionParameter_Type.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ActionParameter_Type
        [iotDbConnector.DAL.ActionParameter_Type](T3.[ActionParameter_Type.ActionParameter_Type_Source], T3.[ActionParameter_Type.ActionParameter_Type_Target])
    FROM (
        SELECT -- Constructing ActionParameter_Type_Source
            CreateRef(iotContext.ActionParameters, row(T2.[ActionParameter_Type.ActionParameter_Type_Source.Id]), [iotDbConnector.DAL.ActionParameter]) AS [ActionParameter_Type.ActionParameter_Type_Source], 
            T2.[ActionParameter_Type.ActionParameter_Type_Target]
        FROM (
            SELECT -- Constructing ActionParameter_Type_Target
                T1.[ActionParameter_Type.ActionParameter_Type_Source.Id], 
                CreateRef(iotContext.ParamTypes, row(T1.[ActionParameter_Type.ActionParameter_Type_Target.Id]), [iotDbConnector.DAL.ParameterType]) AS [ActionParameter_Type.ActionParameter_Type_Target]
            FROM (
                SELECT 
                    T.Id AS [ActionParameter_Type.ActionParameter_Type_Source.Id], 
                    T.Type_Id AS [ActionParameter_Type.ActionParameter_Type_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.ActionParameter AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Actions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Actions
        [iotDbConnector.DAL.DeviceAction](T1.DeviceAction_Id, T1.DeviceAction_ActionName, T1.DeviceAction_ActionDescription, T1.DeviceAction_VisualRepresentationURL, T1.DeviceAction_LastActivationTime) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Devices, ROW(T1.[DeviceAction_Device.DeviceAction_Device_Target.Id]),[iotDbConnector.DAL.Device]),[iotDbConnector.DAL.DeviceAction_Device],DeviceAction_Device_Source,DeviceAction_Device_Target) 
    FROM (
        SELECT 
            T.Id AS DeviceAction_Id, 
            T.ActionName AS DeviceAction_ActionName, 
            T.ActionDescription AS DeviceAction_ActionDescription, 
            T.VisualRepresentationURL AS DeviceAction_VisualRepresentationURL, 
            T.LastActivationTime AS DeviceAction_LastActivationTime, 
            True AS _from0, 
            T.Device_Id AS [DeviceAction_Device.DeviceAction_Device_Target.Id]
        FROM CodeFirstDatabase.DeviceAction AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceAction_Device.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceAction_Device
        [iotDbConnector.DAL.DeviceAction_Device](T3.[DeviceAction_Device.DeviceAction_Device_Source], T3.[DeviceAction_Device.DeviceAction_Device_Target])
    FROM (
        SELECT -- Constructing DeviceAction_Device_Source
            CreateRef(iotContext.Actions, row(T2.[DeviceAction_Device.DeviceAction_Device_Source.Id]), [iotDbConnector.DAL.DeviceAction]) AS [DeviceAction_Device.DeviceAction_Device_Source], 
            T2.[DeviceAction_Device.DeviceAction_Device_Target]
        FROM (
            SELECT -- Constructing DeviceAction_Device_Target
                T1.[DeviceAction_Device.DeviceAction_Device_Source.Id], 
                CreateRef(iotContext.Devices, row(T1.[DeviceAction_Device.DeviceAction_Device_Target.Id]), [iotDbConnector.DAL.Device]) AS [DeviceAction_Device.DeviceAction_Device_Target]
            FROM (
                SELECT 
                    T.Id AS [DeviceAction_Device.DeviceAction_Device_Source.Id], 
                    T.Device_Id AS [DeviceAction_Device.DeviceAction_Device_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DeviceAction AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Devices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Devices
        [iotDbConnector.DAL.Device](T1.Device_Id, T1.Device_DeviceName) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Credentials, ROW(T1.[DeviceCredentials_Devices.DeviceCredentials_Devices_Source.CredentialId]),[iotDbConnector.DAL.DeviceCredentials]),[iotDbConnector.DAL.DeviceCredentials_Devices],DeviceCredentials_Devices_Target,DeviceCredentials_Devices_Source) 
        RELATIONSHIP(CREATEREF(iotContext.Sites, ROW(T1.[Site_Devices.Site_Devices_Source.Id]),[iotDbConnector.DAL.Site]),[iotDbConnector.DAL.Site_Devices],Site_Devices_Target,Site_Devices_Source) 
        RELATIONSHIP(CREATEREF(iotContext.Locations, ROW(T1.[Device_DeviceLocation.Device_DeviceLocation_Target.Id]),[iotDbConnector.DAL.Location]),[iotDbConnector.DAL.Device_DeviceLocation],Device_DeviceLocation_Source,Device_DeviceLocation_Target) 
        RELATIONSHIP(CREATEREF(iotContext.Types, ROW(T1.[Device_Type.Device_Type_Target.Id]),[iotDbConnector.DAL.DeviceType]),[iotDbConnector.DAL.Device_Type],Device_Type_Source,Device_Type_Target) 
    FROM (
        SELECT 
            T.Id AS Device_Id, 
            T.DeviceName AS Device_DeviceName, 
            True AS _from0, 
            T.Credentials_CredentialId AS [DeviceCredentials_Devices.DeviceCredentials_Devices_Source.CredentialId], 
            T.Site_Id AS [Site_Devices.Site_Devices_Source.Id], 
            T.DeviceLocation_Id AS [Device_DeviceLocation.Device_DeviceLocation_Target.Id], 
            T.Type_Id AS [Device_Type.Device_Type_Target.Id]
        FROM CodeFirstDatabase.Device AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceCredentials_Devices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceCredentials_Devices
        [iotDbConnector.DAL.DeviceCredentials_Devices](T3.[DeviceCredentials_Devices.DeviceCredentials_Devices_Source], T3.[DeviceCredentials_Devices.DeviceCredentials_Devices_Target])
    FROM (
        SELECT -- Constructing DeviceCredentials_Devices_Source
            CreateRef(iotContext.Credentials, row(T2.[DeviceCredentials_Devices.DeviceCredentials_Devices_Source.CredentialId]), [iotDbConnector.DAL.DeviceCredentials]) AS [DeviceCredentials_Devices.DeviceCredentials_Devices_Source], 
            T2.[DeviceCredentials_Devices.DeviceCredentials_Devices_Target]
        FROM (
            SELECT -- Constructing DeviceCredentials_Devices_Target
                T1.[DeviceCredentials_Devices.DeviceCredentials_Devices_Source.CredentialId], 
                CreateRef(iotContext.Devices, row(T1.[DeviceCredentials_Devices.DeviceCredentials_Devices_Target.Id]), [iotDbConnector.DAL.Device]) AS [DeviceCredentials_Devices.DeviceCredentials_Devices_Target]
            FROM (
                SELECT 
                    T.Credentials_CredentialId AS [DeviceCredentials_Devices.DeviceCredentials_Devices_Source.CredentialId], 
                    T.Id AS [DeviceCredentials_Devices.DeviceCredentials_Devices_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Device AS T
                WHERE T.Credentials_CredentialId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Site_Devices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Site_Devices
        [iotDbConnector.DAL.Site_Devices](T3.[Site_Devices.Site_Devices_Source], T3.[Site_Devices.Site_Devices_Target])
    FROM (
        SELECT -- Constructing Site_Devices_Source
            CreateRef(iotContext.Sites, row(T2.[Site_Devices.Site_Devices_Source.Id]), [iotDbConnector.DAL.Site]) AS [Site_Devices.Site_Devices_Source], 
            T2.[Site_Devices.Site_Devices_Target]
        FROM (
            SELECT -- Constructing Site_Devices_Target
                T1.[Site_Devices.Site_Devices_Source.Id], 
                CreateRef(iotContext.Devices, row(T1.[Site_Devices.Site_Devices_Target.Id]), [iotDbConnector.DAL.Device]) AS [Site_Devices.Site_Devices_Target]
            FROM (
                SELECT 
                    T.Site_Id AS [Site_Devices.Site_Devices_Source.Id], 
                    T.Id AS [Site_Devices.Site_Devices_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Device AS T
                WHERE T.Site_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Device_DeviceLocation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Device_DeviceLocation
        [iotDbConnector.DAL.Device_DeviceLocation](T3.[Device_DeviceLocation.Device_DeviceLocation_Source], T3.[Device_DeviceLocation.Device_DeviceLocation_Target])
    FROM (
        SELECT -- Constructing Device_DeviceLocation_Source
            CreateRef(iotContext.Devices, row(T2.[Device_DeviceLocation.Device_DeviceLocation_Source.Id]), [iotDbConnector.DAL.Device]) AS [Device_DeviceLocation.Device_DeviceLocation_Source], 
            T2.[Device_DeviceLocation.Device_DeviceLocation_Target]
        FROM (
            SELECT -- Constructing Device_DeviceLocation_Target
                T1.[Device_DeviceLocation.Device_DeviceLocation_Source.Id], 
                CreateRef(iotContext.Locations, row(T1.[Device_DeviceLocation.Device_DeviceLocation_Target.Id]), [iotDbConnector.DAL.Location]) AS [Device_DeviceLocation.Device_DeviceLocation_Target]
            FROM (
                SELECT 
                    T.Id AS [Device_DeviceLocation.Device_DeviceLocation_Source.Id], 
                    T.DeviceLocation_Id AS [Device_DeviceLocation.Device_DeviceLocation_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Device AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Device_Type.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Device_Type
        [iotDbConnector.DAL.Device_Type](T3.[Device_Type.Device_Type_Source], T3.[Device_Type.Device_Type_Target])
    FROM (
        SELECT -- Constructing Device_Type_Source
            CreateRef(iotContext.Devices, row(T2.[Device_Type.Device_Type_Source.Id]), [iotDbConnector.DAL.Device]) AS [Device_Type.Device_Type_Source], 
            T2.[Device_Type.Device_Type_Target]
        FROM (
            SELECT -- Constructing Device_Type_Target
                T1.[Device_Type.Device_Type_Source.Id], 
                CreateRef(iotContext.Types, row(T1.[Device_Type.Device_Type_Target.Id]), [iotDbConnector.DAL.DeviceType]) AS [Device_Type.Device_Type_Target]
            FROM (
                SELECT 
                    T.Id AS [Device_Type.Device_Type_Source.Id], 
                    T.Type_Id AS [Device_Type.Device_Type_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Device AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Credentials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Credentials
        [iotDbConnector.DAL.DeviceCredentials](T1.DeviceCredentials_CredentialId, T1.DeviceCredentials_Username, T1.DeviceCredentials_Password, T1.DeviceCredentials_HashData, T1.DeviceCredentials_PermissionExpireDate, T1.DeviceCredentials_PasswordExpireDate) WITH 
        RELATIONSHIP(CREATEREF(iotContext.AppAuthLevels, ROW(T1.[AppAuthLevel_Credentials.AppAuthLevel_Credentials_Source.AppAuthLevelId]),[iotDbConnector.DAL.AppAuthLevel]),[iotDbConnector.DAL.AppAuthLevel_Credentials],AppAuthLevel_Credentials_Target,AppAuthLevel_Credentials_Source) 
    FROM (
        SELECT 
            T.CredentialId AS DeviceCredentials_CredentialId, 
            T.Username AS DeviceCredentials_Username, 
            T.Password AS DeviceCredentials_Password, 
            T.HashData AS DeviceCredentials_HashData, 
            T.PermissionExpireDate AS DeviceCredentials_PermissionExpireDate, 
            T.PasswordExpireDate AS DeviceCredentials_PasswordExpireDate, 
            True AS _from0, 
            T.AuthLevel_AppAuthLevelId AS [AppAuthLevel_Credentials.AppAuthLevel_Credentials_Source.AppAuthLevelId]
        FROM CodeFirstDatabase.DeviceCredentials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.AppAuthLevel_Credentials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AppAuthLevel_Credentials
        [iotDbConnector.DAL.AppAuthLevel_Credentials](T3.[AppAuthLevel_Credentials.AppAuthLevel_Credentials_Source], T3.[AppAuthLevel_Credentials.AppAuthLevel_Credentials_Target])
    FROM (
        SELECT -- Constructing AppAuthLevel_Credentials_Source
            CreateRef(iotContext.AppAuthLevels, row(T2.[AppAuthLevel_Credentials.AppAuthLevel_Credentials_Source.AppAuthLevelId]), [iotDbConnector.DAL.AppAuthLevel]) AS [AppAuthLevel_Credentials.AppAuthLevel_Credentials_Source], 
            T2.[AppAuthLevel_Credentials.AppAuthLevel_Credentials_Target]
        FROM (
            SELECT -- Constructing AppAuthLevel_Credentials_Target
                T1.[AppAuthLevel_Credentials.AppAuthLevel_Credentials_Source.AppAuthLevelId], 
                CreateRef(iotContext.Credentials, row(T1.[AppAuthLevel_Credentials.AppAuthLevel_Credentials_Target.CredentialId]), [iotDbConnector.DAL.DeviceCredentials]) AS [AppAuthLevel_Credentials.AppAuthLevel_Credentials_Target]
            FROM (
                SELECT 
                    T.AuthLevel_AppAuthLevelId AS [AppAuthLevel_Credentials.AppAuthLevel_Credentials_Source.AppAuthLevelId], 
                    T.CredentialId AS [AppAuthLevel_Credentials.AppAuthLevel_Credentials_Target.CredentialId], 
                    True AS _from0
                FROM CodeFirstDatabase.DeviceCredentials AS T
                WHERE T.AuthLevel_AppAuthLevelId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.AppAuthLevels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AppAuthLevels
        [iotDbConnector.DAL.AppAuthLevel](T1.AppAuthLevel_AppAuthLevelId, T1.AppAuthLevel_Write, T1.AppAuthLevel_Read)
    FROM (
        SELECT 
            T.AppAuthLevelId AS AppAuthLevel_AppAuthLevelId, 
            T.Write AS AppAuthLevel_Write, 
            T.Read AS AppAuthLevel_Read, 
            True AS _from0
        FROM CodeFirstDatabase.AppAuthLevel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.Locations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Locations
        [iotDbConnector.DAL.Location](T1.Location_Id, T1.Location_LocationName, T1.Location_Lat, T1.Location_Lng, T1.Location_LocationVisualRepresentationURL) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Domains, ROW(T1.[iotDomain_Locations.iotDomain_Locations_Source.Id]),[iotDbConnector.DAL.iotDomain]),[iotDbConnector.DAL.iotDomain_Locations],iotDomain_Locations_Target,iotDomain_Locations_Source) 
    FROM (
        SELECT 
            T.Id AS Location_Id, 
            T.LocationName AS Location_LocationName, 
            T.Lat AS Location_Lat, 
            T.Lng AS Location_Lng, 
            T.LocationVisualRepresentationURL AS Location_LocationVisualRepresentationURL, 
            True AS _from0, 
            T.Domain_Id AS [iotDomain_Locations.iotDomain_Locations_Source.Id]
        FROM CodeFirstDatabase.Location AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.iotDomain_Locations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing iotDomain_Locations
        [iotDbConnector.DAL.iotDomain_Locations](T3.[iotDomain_Locations.iotDomain_Locations_Source], T3.[iotDomain_Locations.iotDomain_Locations_Target])
    FROM (
        SELECT -- Constructing iotDomain_Locations_Source
            CreateRef(iotContext.Domains, row(T2.[iotDomain_Locations.iotDomain_Locations_Source.Id]), [iotDbConnector.DAL.iotDomain]) AS [iotDomain_Locations.iotDomain_Locations_Source], 
            T2.[iotDomain_Locations.iotDomain_Locations_Target]
        FROM (
            SELECT -- Constructing iotDomain_Locations_Target
                T1.[iotDomain_Locations.iotDomain_Locations_Source.Id], 
                CreateRef(iotContext.Locations, row(T1.[iotDomain_Locations.iotDomain_Locations_Target.Id]), [iotDbConnector.DAL.Location]) AS [iotDomain_Locations.iotDomain_Locations_Target]
            FROM (
                SELECT 
                    T.Domain_Id AS [iotDomain_Locations.iotDomain_Locations_Source.Id], 
                    T.Id AS [iotDomain_Locations.iotDomain_Locations_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Location AS T
                WHERE T.Domain_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Domains.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Domains
        [iotDbConnector.DAL.iotDomain](T1.iotDomain_Id, T1.iotDomain_DomainName)
    FROM (
        SELECT 
            T.Id AS iotDomain_Id, 
            T.DomainName AS iotDomain_DomainName, 
            True AS _from0
        FROM CodeFirstDatabase.iotDomain AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.Types.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Types
        [iotDbConnector.DAL.DeviceType](T1.DeviceType_Id, T1.DeviceType_TypeName, T1.DeviceType_TypeDescription, T1.DeviceType_VisualRepresentationURL) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Domains, ROW(T1.[DeviceType_Domain.DeviceType_Domain_Target.Id]),[iotDbConnector.DAL.iotDomain]),[iotDbConnector.DAL.DeviceType_Domain],DeviceType_Domain_Source,DeviceType_Domain_Target) 
    FROM (
        SELECT 
            T.Id AS DeviceType_Id, 
            T.TypeName AS DeviceType_TypeName, 
            T.TypeDescription AS DeviceType_TypeDescription, 
            T.VisualRepresentationURL AS DeviceType_VisualRepresentationURL, 
            True AS _from0, 
            T.Domain_Id AS [DeviceType_Domain.DeviceType_Domain_Target.Id]
        FROM CodeFirstDatabase.DeviceType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceType_Domain.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceType_Domain
        [iotDbConnector.DAL.DeviceType_Domain](T3.[DeviceType_Domain.DeviceType_Domain_Source], T3.[DeviceType_Domain.DeviceType_Domain_Target])
    FROM (
        SELECT -- Constructing DeviceType_Domain_Source
            CreateRef(iotContext.Types, row(T2.[DeviceType_Domain.DeviceType_Domain_Source.Id]), [iotDbConnector.DAL.DeviceType]) AS [DeviceType_Domain.DeviceType_Domain_Source], 
            T2.[DeviceType_Domain.DeviceType_Domain_Target]
        FROM (
            SELECT -- Constructing DeviceType_Domain_Target
                T1.[DeviceType_Domain.DeviceType_Domain_Source.Id], 
                CreateRef(iotContext.Domains, row(T1.[DeviceType_Domain.DeviceType_Domain_Target.Id]), [iotDbConnector.DAL.iotDomain]) AS [DeviceType_Domain.DeviceType_Domain_Target]
            FROM (
                SELECT 
                    T.Id AS [DeviceType_Domain.DeviceType_Domain_Source.Id], 
                    T.Domain_Id AS [DeviceType_Domain.DeviceType_Domain_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DeviceType AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Sites.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sites
        [iotDbConnector.DAL.Site](T1.Site_Id, T1.Site_SiteName) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Domains, ROW(T1.[Site_Domain.Site_Domain_Target.Id]),[iotDbConnector.DAL.iotDomain]),[iotDbConnector.DAL.Site_Domain],Site_Domain_Source,Site_Domain_Target) 
        RELATIONSHIP(CREATEREF(iotContext.Locations, ROW(T1.[Site_siteLocation.Site_siteLocation_Target.Id]),[iotDbConnector.DAL.Location]),[iotDbConnector.DAL.Site_siteLocation],Site_siteLocation_Source,Site_siteLocation_Target) 
    FROM (
        SELECT 
            T.Id AS Site_Id, 
            T.SiteName AS Site_SiteName, 
            True AS _from0, 
            T.Domain_Id AS [Site_Domain.Site_Domain_Target.Id], 
            T.siteLocation_Id AS [Site_siteLocation.Site_siteLocation_Target.Id]
        FROM CodeFirstDatabase.Site AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.Site_Domain.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Site_Domain
        [iotDbConnector.DAL.Site_Domain](T3.[Site_Domain.Site_Domain_Source], T3.[Site_Domain.Site_Domain_Target])
    FROM (
        SELECT -- Constructing Site_Domain_Source
            CreateRef(iotContext.Sites, row(T2.[Site_Domain.Site_Domain_Source.Id]), [iotDbConnector.DAL.Site]) AS [Site_Domain.Site_Domain_Source], 
            T2.[Site_Domain.Site_Domain_Target]
        FROM (
            SELECT -- Constructing Site_Domain_Target
                T1.[Site_Domain.Site_Domain_Source.Id], 
                CreateRef(iotContext.Domains, row(T1.[Site_Domain.Site_Domain_Target.Id]), [iotDbConnector.DAL.iotDomain]) AS [Site_Domain.Site_Domain_Target]
            FROM (
                SELECT 
                    T.Id AS [Site_Domain.Site_Domain_Source.Id], 
                    T.Domain_Id AS [Site_Domain.Site_Domain_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Site AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Site_siteLocation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Site_siteLocation
        [iotDbConnector.DAL.Site_siteLocation](T3.[Site_siteLocation.Site_siteLocation_Source], T3.[Site_siteLocation.Site_siteLocation_Target])
    FROM (
        SELECT -- Constructing Site_siteLocation_Source
            CreateRef(iotContext.Sites, row(T2.[Site_siteLocation.Site_siteLocation_Source.Id]), [iotDbConnector.DAL.Site]) AS [Site_siteLocation.Site_siteLocation_Source], 
            T2.[Site_siteLocation.Site_siteLocation_Target]
        FROM (
            SELECT -- Constructing Site_siteLocation_Target
                T1.[Site_siteLocation.Site_siteLocation_Source.Id], 
                CreateRef(iotContext.Locations, row(T1.[Site_siteLocation.Site_siteLocation_Target.Id]), [iotDbConnector.DAL.Location]) AS [Site_siteLocation.Site_siteLocation_Target]
            FROM (
                SELECT 
                    T.Id AS [Site_siteLocation.Site_siteLocation_Source.Id], 
                    T.siteLocation_Id AS [Site_siteLocation.Site_siteLocation_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Site AS T
                WHERE T.siteLocation_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Endpoints.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Endpoints
        [iotDbConnector.DAL.EndpointInfo](T1.EndpointInfo_Id, T1.EndpointInfo_Hostname, T1.EndpointInfo_Port, T1.EndpointInfo_RequiresAuthentication, T1.EndpointInfo_SupportsAllJoynProtocol, T1.EndpointInfo_SupportsCoAPProtocol, T1.EndpointInfo_SupportsMQTTProtocol, T1.EndpointInfo_SupportsRESTfulProtocol, T1.EndpointInfo_SupportsSconnProtocol, T1.EndpointInfo_SupportsOnvifProtocol)
    FROM (
        SELECT 
            T.Id AS EndpointInfo_Id, 
            T.Hostname AS EndpointInfo_Hostname, 
            T.Port AS EndpointInfo_Port, 
            T.RequiresAuthentication AS EndpointInfo_RequiresAuthentication, 
            T.SupportsAllJoynProtocol AS EndpointInfo_SupportsAllJoynProtocol, 
            T.SupportsCoAPProtocol AS EndpointInfo_SupportsCoAPProtocol, 
            T.SupportsMQTTProtocol AS EndpointInfo_SupportsMQTTProtocol, 
            T.SupportsRESTfulProtocol AS EndpointInfo_SupportsRESTfulProtocol, 
            T.SupportsSconnProtocol AS EndpointInfo_SupportsSconnProtocol, 
            T.SupportsOnvifProtocol AS EndpointInfo_SupportsOnvifProtocol, 
            True AS _from0
        FROM CodeFirstDatabase.EndpointInfo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.Properties.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Properties
        [iotDbConnector.DAL.DeviceProperty](T1.DeviceProperty_Id, T1.DeviceProperty_PropertyName, T1.DeviceProperty_PropertyDescription, T1.DeviceProperty_VisualRepresentationURL, T1.DeviceProperty_LastUpdateTime) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Devices, ROW(T1.[DeviceProperty_Device.DeviceProperty_Device_Target.Id]),[iotDbConnector.DAL.Device]),[iotDbConnector.DAL.DeviceProperty_Device],DeviceProperty_Device_Source,DeviceProperty_Device_Target) 
    FROM (
        SELECT 
            T.Id AS DeviceProperty_Id, 
            T.PropertyName AS DeviceProperty_PropertyName, 
            T.PropertyDescription AS DeviceProperty_PropertyDescription, 
            T.VisualRepresentationURL AS DeviceProperty_VisualRepresentationURL, 
            T.LastUpdateTime AS DeviceProperty_LastUpdateTime, 
            True AS _from0, 
            T.Device_Id AS [DeviceProperty_Device.DeviceProperty_Device_Target.Id]
        FROM CodeFirstDatabase.DeviceProperty AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceProperty_Device.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceProperty_Device
        [iotDbConnector.DAL.DeviceProperty_Device](T3.[DeviceProperty_Device.DeviceProperty_Device_Source], T3.[DeviceProperty_Device.DeviceProperty_Device_Target])
    FROM (
        SELECT -- Constructing DeviceProperty_Device_Source
            CreateRef(iotContext.Properties, row(T2.[DeviceProperty_Device.DeviceProperty_Device_Source.Id]), [iotDbConnector.DAL.DeviceProperty]) AS [DeviceProperty_Device.DeviceProperty_Device_Source], 
            T2.[DeviceProperty_Device.DeviceProperty_Device_Target]
        FROM (
            SELECT -- Constructing DeviceProperty_Device_Target
                T1.[DeviceProperty_Device.DeviceProperty_Device_Source.Id], 
                CreateRef(iotContext.Devices, row(T1.[DeviceProperty_Device.DeviceProperty_Device_Target.Id]), [iotDbConnector.DAL.Device]) AS [DeviceProperty_Device.DeviceProperty_Device_Target]
            FROM (
                SELECT 
                    T.Id AS [DeviceProperty_Device.DeviceProperty_Device_Source.Id], 
                    T.Device_Id AS [DeviceProperty_Device.DeviceProperty_Device_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DeviceProperty AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.Parameters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Parameters
        [iotDbConnector.DAL.DeviceParameter](T1.DeviceParameter_Id, T1.DeviceParameter_Value, T1.DeviceParameter_ParamDescription, T1.DeviceParameter_VisualRepresentationUrl) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Actions, ROW(T1.[DeviceParameter_Action.DeviceParameter_Action_Target.Id]),[iotDbConnector.DAL.DeviceAction]),[iotDbConnector.DAL.DeviceParameter_Action],DeviceParameter_Action_Source,DeviceParameter_Action_Target) 
        RELATIONSHIP(CREATEREF(iotContext.Properties, ROW(T1.[DeviceParameter_Property.DeviceParameter_Property_Target.Id]),[iotDbConnector.DAL.DeviceProperty]),[iotDbConnector.DAL.DeviceParameter_Property],DeviceParameter_Property_Source,DeviceParameter_Property_Target) 
        RELATIONSHIP(CREATEREF(iotContext.ParamTypes, ROW(T1.[DeviceParameter_Type.DeviceParameter_Type_Target.Id]),[iotDbConnector.DAL.ParameterType]),[iotDbConnector.DAL.DeviceParameter_Type],DeviceParameter_Type_Source,DeviceParameter_Type_Target) 
    FROM (
        SELECT 
            T.Id AS DeviceParameter_Id, 
            T.[Value] AS DeviceParameter_Value, 
            T.ParamDescription AS DeviceParameter_ParamDescription, 
            T.VisualRepresentationUrl AS DeviceParameter_VisualRepresentationUrl, 
            True AS _from0, 
            T.Action_Id AS [DeviceParameter_Action.DeviceParameter_Action_Target.Id], 
            T.Property_Id AS [DeviceParameter_Property.DeviceParameter_Property_Target.Id], 
            T.Type_Id AS [DeviceParameter_Type.DeviceParameter_Type_Target.Id]
        FROM CodeFirstDatabase.DeviceParameter AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceParameter_Action.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceParameter_Action
        [iotDbConnector.DAL.DeviceParameter_Action](T3.[DeviceParameter_Action.DeviceParameter_Action_Source], T3.[DeviceParameter_Action.DeviceParameter_Action_Target])
    FROM (
        SELECT -- Constructing DeviceParameter_Action_Source
            CreateRef(iotContext.Parameters, row(T2.[DeviceParameter_Action.DeviceParameter_Action_Source.Id]), [iotDbConnector.DAL.DeviceParameter]) AS [DeviceParameter_Action.DeviceParameter_Action_Source], 
            T2.[DeviceParameter_Action.DeviceParameter_Action_Target]
        FROM (
            SELECT -- Constructing DeviceParameter_Action_Target
                T1.[DeviceParameter_Action.DeviceParameter_Action_Source.Id], 
                CreateRef(iotContext.Actions, row(T1.[DeviceParameter_Action.DeviceParameter_Action_Target.Id]), [iotDbConnector.DAL.DeviceAction]) AS [DeviceParameter_Action.DeviceParameter_Action_Target]
            FROM (
                SELECT 
                    T.Id AS [DeviceParameter_Action.DeviceParameter_Action_Source.Id], 
                    T.Action_Id AS [DeviceParameter_Action.DeviceParameter_Action_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DeviceParameter AS T
                WHERE T.Action_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceParameter_Property.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceParameter_Property
        [iotDbConnector.DAL.DeviceParameter_Property](T3.[DeviceParameter_Property.DeviceParameter_Property_Source], T3.[DeviceParameter_Property.DeviceParameter_Property_Target])
    FROM (
        SELECT -- Constructing DeviceParameter_Property_Source
            CreateRef(iotContext.Parameters, row(T2.[DeviceParameter_Property.DeviceParameter_Property_Source.Id]), [iotDbConnector.DAL.DeviceParameter]) AS [DeviceParameter_Property.DeviceParameter_Property_Source], 
            T2.[DeviceParameter_Property.DeviceParameter_Property_Target]
        FROM (
            SELECT -- Constructing DeviceParameter_Property_Target
                T1.[DeviceParameter_Property.DeviceParameter_Property_Source.Id], 
                CreateRef(iotContext.Properties, row(T1.[DeviceParameter_Property.DeviceParameter_Property_Target.Id]), [iotDbConnector.DAL.DeviceProperty]) AS [DeviceParameter_Property.DeviceParameter_Property_Target]
            FROM (
                SELECT 
                    T.Id AS [DeviceParameter_Property.DeviceParameter_Property_Source.Id], 
                    T.Property_Id AS [DeviceParameter_Property.DeviceParameter_Property_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DeviceParameter AS T
                WHERE T.Property_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.DeviceParameter_Type.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DeviceParameter_Type
        [iotDbConnector.DAL.DeviceParameter_Type](T3.[DeviceParameter_Type.DeviceParameter_Type_Source], T3.[DeviceParameter_Type.DeviceParameter_Type_Target])
    FROM (
        SELECT -- Constructing DeviceParameter_Type_Source
            CreateRef(iotContext.Parameters, row(T2.[DeviceParameter_Type.DeviceParameter_Type_Source.Id]), [iotDbConnector.DAL.DeviceParameter]) AS [DeviceParameter_Type.DeviceParameter_Type_Source], 
            T2.[DeviceParameter_Type.DeviceParameter_Type_Target]
        FROM (
            SELECT -- Constructing DeviceParameter_Type_Target
                T1.[DeviceParameter_Type.DeviceParameter_Type_Source.Id], 
                CreateRef(iotContext.ParamTypes, row(T1.[DeviceParameter_Type.DeviceParameter_Type_Target.Id]), [iotDbConnector.DAL.ParameterType]) AS [DeviceParameter_Type.DeviceParameter_Type_Target]
            FROM (
                SELECT 
                    T.Id AS [DeviceParameter_Type.DeviceParameter_Type_Source.Id], 
                    T.Type_Id AS [DeviceParameter_Type.DeviceParameter_Type_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.DeviceParameter AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.ParameterChanges.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParameterChanges
        [iotDbConnector.DAL.ParameterChangeHistory](T1.ParameterChangeHistory_ParameterChangeId, T1.ParameterChangeHistory_Date, T1.ParameterChangeHistory_Value) WITH 
        RELATIONSHIP(CREATEREF(iotContext.Parameters, ROW(T1.[ParameterChangeHistory_Property.ParameterChangeHistory_Property_Target.Id]),[iotDbConnector.DAL.DeviceParameter]),[iotDbConnector.DAL.ParameterChangeHistory_Property],ParameterChangeHistory_Property_Source,ParameterChangeHistory_Property_Target) 
    FROM (
        SELECT 
            T.ParameterChangeId AS ParameterChangeHistory_ParameterChangeId, 
            T.Date AS ParameterChangeHistory_Date, 
            T.[Value] AS ParameterChangeHistory_Value, 
            True AS _from0, 
            T.Property_Id AS [ParameterChangeHistory_Property.ParameterChangeHistory_Property_Target.Id]
        FROM CodeFirstDatabase.ParameterChangeHistory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.ParameterChangeHistory_Property.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParameterChangeHistory_Property
        [iotDbConnector.DAL.ParameterChangeHistory_Property](T3.[ParameterChangeHistory_Property.ParameterChangeHistory_Property_Source], T3.[ParameterChangeHistory_Property.ParameterChangeHistory_Property_Target])
    FROM (
        SELECT -- Constructing ParameterChangeHistory_Property_Source
            CreateRef(iotContext.ParameterChanges, row(T2.[ParameterChangeHistory_Property.ParameterChangeHistory_Property_Source.ParameterChangeId]), [iotDbConnector.DAL.ParameterChangeHistory]) AS [ParameterChangeHistory_Property.ParameterChangeHistory_Property_Source], 
            T2.[ParameterChangeHistory_Property.ParameterChangeHistory_Property_Target]
        FROM (
            SELECT -- Constructing ParameterChangeHistory_Property_Target
                T1.[ParameterChangeHistory_Property.ParameterChangeHistory_Property_Source.ParameterChangeId], 
                CreateRef(iotContext.Parameters, row(T1.[ParameterChangeHistory_Property.ParameterChangeHistory_Property_Target.Id]), [iotDbConnector.DAL.DeviceParameter]) AS [ParameterChangeHistory_Property.ParameterChangeHistory_Property_Target]
            FROM (
                SELECT 
                    T.ParameterChangeId AS [ParameterChangeHistory_Property.ParameterChangeHistory_Property_Source.ParameterChangeId], 
                    T.Property_Id AS [ParameterChangeHistory_Property.ParameterChangeHistory_Property_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.ParameterChangeHistory AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.SconnMappers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SconnMappers
        [iotDbConnector.DAL.sconnConfigMapper](T1.sconnConfigMapper_MapperId, T1.sconnConfigMapper_ConfigType, T1.sconnConfigMapper_SeqNumber) WITH 
        RELATIONSHIP(CREATEREF(iotContext.ActionParameters, ROW(T1.[sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Target.Id]),[iotDbConnector.DAL.ActionParameter]),[iotDbConnector.DAL.sconnConfigMapper_ActionParam],sconnConfigMapper_ActionParam_Source,sconnConfigMapper_ActionParam_Target) 
        RELATIONSHIP(CREATEREF(iotContext.Parameters, ROW(T1.[sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Target.Id]),[iotDbConnector.DAL.DeviceParameter]),[iotDbConnector.DAL.sconnConfigMapper_Parameter],sconnConfigMapper_Parameter_Source,sconnConfigMapper_Parameter_Target) 
    FROM (
        SELECT 
            T.MapperId AS sconnConfigMapper_MapperId, 
            T.ConfigType AS sconnConfigMapper_ConfigType, 
            T.SeqNumber AS sconnConfigMapper_SeqNumber, 
            True AS _from0, 
            T.ActionParam_Id AS [sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Target.Id], 
            T.Parameter_Id AS [sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Target.Id]
        FROM CodeFirstDatabase.sconnConfigMapper AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for iotContext.sconnConfigMapper_ActionParam.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sconnConfigMapper_ActionParam
        [iotDbConnector.DAL.sconnConfigMapper_ActionParam](T3.[sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Source], T3.[sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Target])
    FROM (
        SELECT -- Constructing sconnConfigMapper_ActionParam_Source
            CreateRef(iotContext.SconnMappers, row(T2.[sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Source.MapperId]), [iotDbConnector.DAL.sconnConfigMapper]) AS [sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Source], 
            T2.[sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Target]
        FROM (
            SELECT -- Constructing sconnConfigMapper_ActionParam_Target
                T1.[sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Source.MapperId], 
                CreateRef(iotContext.ActionParameters, row(T1.[sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Target.Id]), [iotDbConnector.DAL.ActionParameter]) AS [sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Target]
            FROM (
                SELECT 
                    T.MapperId AS [sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Source.MapperId], 
                    T.ActionParam_Id AS [sconnConfigMapper_ActionParam.sconnConfigMapper_ActionParam_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.sconnConfigMapper AS T
                WHERE T.ActionParam_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.sconnConfigMapper_Parameter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sconnConfigMapper_Parameter
        [iotDbConnector.DAL.sconnConfigMapper_Parameter](T3.[sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Source], T3.[sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Target])
    FROM (
        SELECT -- Constructing sconnConfigMapper_Parameter_Source
            CreateRef(iotContext.SconnMappers, row(T2.[sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Source.MapperId]), [iotDbConnector.DAL.sconnConfigMapper]) AS [sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Source], 
            T2.[sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Target]
        FROM (
            SELECT -- Constructing sconnConfigMapper_Parameter_Target
                T1.[sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Source.MapperId], 
                CreateRef(iotContext.Parameters, row(T1.[sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Target.Id]), [iotDbConnector.DAL.DeviceParameter]) AS [sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Target]
            FROM (
                SELECT 
                    T.MapperId AS [sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Source.MapperId], 
                    T.Parameter_Id AS [sconnConfigMapper_Parameter.sconnConfigMapper_Parameter_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.sconnConfigMapper AS T
                WHERE T.Parameter_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for iotContext.ParamTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParamTypes
        [iotDbConnector.DAL.ParameterType](T1.ParameterType_Id, T1.ParameterType_Name, T1.ParameterType_Description, T1.ParameterType_DocumentationURL)
    FROM (
        SELECT 
            T.Id AS ParameterType_Id, 
            T.Name AS ParameterType_Name, 
            T.Description AS ParameterType_Description, 
            T.DocumentationURL AS ParameterType_DocumentationURL, 
            True AS _from0
        FROM CodeFirstDatabase.ParameterType AS T
    ) AS T1");
        }
    }
}
