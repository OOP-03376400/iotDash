@model iotDash.Areas.AlarmSystem.Models.AlarmSystemDetailModel


@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/toggleswitch")
@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/bundles/numspin")

@Styles.Render("~/bundles/css/toggleswitch")
@Styles.Render("~/bundles/css/numspin")

@{
    ViewBag.Title = "Index";
}

<h2>@Model.Config.site.siteName</h2>



<script src="~/signalr/hubs"></script>

@functions{

    public string PanelClassForResultParam(iotDbConnector.DAL.DeviceParameter param)
    {
        if (int.Parse(param.Value) == 1)
        {
            return "panel-primary";
        }
        else
        {
            return "panel-info";
        }
    }


    public string PanelClassForActionResult(iotDbConnector.DAL.DeviceActionResult param)
    {
        if (int.Parse(param.Value) == 1)
        {
            return "panel-primary";
        }
        else
        {
            return "panel-info";
        }
    }

    public string SpanClassForArmStatusDisplay()
    {
        int val = Model.Config.site.siteCfg.globalConfig.memCFG[sconnConnector.ipcDefines.mAdrArmed];
        if (val > 0)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string DescForArmStatusDisplay()
    {
        int val = Model.Config.site.siteCfg.globalConfig.memCFG[sconnConnector.ipcDefines.mAdrArmed];
        if (val > 0)
        {
            return "Armed";
        }
        else
        {
            return "Disarmed";
        }
    }



    public string SpanClassForViolationStatusDisplay()
    {
        int val = Model.Config.site.siteCfg.globalConfig.memCFG[sconnConnector.ipcDefines.mAdrViolation];
        if (val > 0)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }

    public string DescForViolationStatusDisplay()
    {
        int val = Model.Config.site.siteCfg.globalConfig.memCFG[sconnConnector.ipcDefines.mAdrViolation];
        if (val > 0)
        {
            return "Yes";
        }
        else
        {
            return "No";
        }
    }


    public string DescForArmAction()
    {
        int val = Model.Config.site.siteCfg.globalConfig.memCFG[sconnConnector.ipcDefines.mAdrArmed];
        if (val > 0)
        {
            return "Disarm";
        }
        else
        {
            return "Arm";
        }
    }

        
    public string ContentForDigitalIoValue(int value)
    {
        if (value == 0)
        {
            return "<button type='button' class='btn btn-danger'>"+value.ToString() + "</button>";
        }
        else
        {
            return "<button type='button' class='btn btn-success'>" + value.ToString() + "</button>";
        }
    }
    
    public string ImageUrlForDigitalIoValue(int value)
    {
        if (value == 0)
        {
            return "";
        }
        else
        {
            return "";
        }
    }


    //TODO generate req param input lists


}


<script>

    var Reloading = false;



    function ReloadPanels() {

        Reloading = true;

        $(".panel").removeClass("panel-info");
        $(".panel").removeClass("panel-primary");

        $(".panel").each(function () {
            //apply class based on value
            var contval = $(this).find(".noderesval").first().attr("title");
            var pval = parseInt(contval);
            if (pval == 1) {
                $(this).addClass("panel-primary");
            } else {
                $(this).addClass("panel-info");
            }

            //set all result params
            $(this).find(".tgsw-action").each(function () {
                var IsSet = (pval == 1 ? true : false);
                var sw = $(this).bootstrapSwitch('state', IsSet);

            });

        });

        Reloading = false;
    }


    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }

    var obj = { a: 1, 'b': 'foo', c: [false, 'false', null, 'null', { d: { e: 1.3e5, f: '1.3e5' } }] };

    $(function () {

        ReloadPanels();

        $('.spinEdit').spinedit({
            minimum: 50,
            maximum: 12500,
            step: 50,
            value: 150,
            numberOfDecimals: 0
        });



        $('.tgsw-action').on('switchChange.bootstrapSwitch', function () {

            if (!Reloading) {

                //get sender id
                var ElementId = $(this).attr("id");
                var AccessorId = "#".concat(ElementId);

                //TODO load req param input lists
                var StateToSet = $(this).bootstrapSwitch('state');
                //alert("req param :" + StateToSet);
                var ParamList = [StateToSet];

                //perform action
                $.ajax({
                    url: '@Url.Action("PerformAction", "Device")',
                    type: this.method,
                    data: {
                        ActionId: $(AccessorId).attr("title"),
                        ActionParams: ParamList
                    },
                    success: function (result) {
                        $('#resultview').html(result);
                    }
                });

            }


        });


        $('#actionselector a').click(function (e) {
            e.preventDefault()
            $(this).tab('show')
        })


    });

</script>


<div role="tabpanel">

    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist" id="actionselector">
        <li role="presentation" class="active"><a href="#tabStatus" aria-controls="tabStatus" role="tab" data-toggle="tab">Status</a></li>
        <li role="presentation"><a href="#tabConfigure" aria-controls="tabConfigure" role="tab" data-toggle="tab">Configure</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">

        <div role="tabpanel" class="tab-pane active" id="tabStatus">
            <div class="container-fluid">
                <div class="row">
                    <div id="ReloadModelData" class="col-md-1">
                        @Html.ActionLink("Refresh", "Index", new { DeviceId = Model.AlarmDevice.Id }, new { @class = "glyphicon glyphicon-refresh" })
                    </div>
                </div>

                <div class="row">

                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <center>
                                <h2>Status</h2>
                            </center>
                        </div>
                        <div class="panel-body">
                            <p></p>
                        </div>

                        <table class="table">
                            <tr>
                                <td>Device Number</td>
                                <td>@Model.Config.site.siteCfg.deviceNo</td>
                            </tr>

                            <tr>
                                <td>Armed</td>
                                <td><span class='@SpanClassForArmStatusDisplay()'>@DescForArmStatusDisplay()</span></td>
                            </tr>

                            <tr>
                                <td>Violation</td>
                                <td><span class='@SpanClassForViolationStatusDisplay()'>@DescForViolationStatusDisplay()</span></td>
                            </tr>

                        </table>

                    </div>

                </div>

                <div class="row">
                    @Html.ActionLink(@DescForArmAction(), "ToggleArm", new { DeviceId = Model.AlarmDevice.Id }, new { @class = "btn btn-primary" })
                </div>


                <div class="row">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-2">
                                        <img src="~/Content/img/sensorin.png" alt="563te" class="img-circle img-section-icon">
                                    </div>
                                    <div class="col-md-10">
                                      <h2>Inputs</h2>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body"></div>
                        <table class="table">
                            <tr>
                                <th>Input </th>
                                <th>Type</th>
                                <th>State </th>

                            </tr>

                            @for (int i = 0; i < Model.EditedDevice.Inputs.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Model.EditedDevice.Inputs[i].Name.ToString()
                                    </td>

                                    @Html.HiddenFor(model => model.EditedDevice.Inputs[i].Id)
                                    @Html.HiddenFor(model => model.EditedDevice.Inputs[i].NameId)

                                    <td>
                                        @Model.EditedDevice.Inputs[i].Type.ToString()
                                    </td>

                                    <td>
                                        @Html.Raw(HttpUtility.HtmlDecode(ContentForDigitalIoValue(Model.EditedDevice.Inputs[i].Value)))
                                    </td>

                                </tr>
                            }

                        </table>
                    </div>

                </div>

                <div class="row">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-2">
                                        <img src="~/Content/img/sensorout.png" alt="124das" class="img-circle img-section-icon">
                                    </div>
                                    <div class="col-md-10">

                                        <h2>Outputs</h2>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body"></div>
                        <table class="table">
                            <tr>
                                <th>Output </th>
                                <th>Type</th>
                                <th>State </th>

                            </tr>

                            @for (int i = 0; i < Model.EditedDevice.Outputs.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Model.EditedDevice.Inputs[i].Name.ToString()
                                    </td>

                                    @Html.HiddenFor(model => model.EditedDevice.Outputs[i].Id)
                                    @Html.HiddenFor(model => model.EditedDevice.Outputs[i].NameId)

                                    <td>
                                        @Model.EditedDevice.Outputs[i].Type.ToString()

                                    </td>

                                    <td>
                                        @Html.Raw(HttpUtility.HtmlDecode(ContentForDigitalIoValue(Model.EditedDevice.Outputs[i].Value)))
                                    </td>

                                </tr>
                            }

                        </table>
                    </div>

                </div>


            </div>
        </div>

        <div role="tabpanel" class="tab-pane" id="tabConfigure">

            <div role="tabpanel">

                <ul class="nav nav-tabs" role="tablist" id="cfgtypeselector">
                    <li role="presentation" class="active"><a href="#tabInputs" aria-controls="tabInputs" role="tab" data-toggle="tab">Inputs</a></li>
                    <li role="presentation"><a href="#tabOutputs" aria-controls="tabOutputs" role="tab" data-toggle="tab">Outputs</a></li>
                    <li role="presentation"><a href="#tabRelays" aria-controls="tabRelays" role="tab" data-toggle="tab">Relays</a></li>
                    <li role="presentation"><a href="#tabNames" aria-controls="tabNames" role="tab" data-toggle="tab">Names</a></li>
                </ul>

                <div class="tab-content">

                    <div role="tabpanel" class="tab-pane" id="tabInputs">
                        @Html.Action("InputsConfigure", new { AlarmDeviceId = 0, ServerId = Model.AlarmDevice.Id })
                    </div>

                    <div role="tabpanel" class="tab-pane" id="tabOutputs">
                        @Html.Action("OutputsConfigure", new { AlarmDeviceId = 0, ServerId = Model.AlarmDevice.Id })
                    </div>

                    <div role="tabpanel" class="tab-pane" id="tabRelays">
                        @Html.Action("RelaysConfigure", new { AlarmDeviceId = 0, ServerId = Model.AlarmDevice.Id })
                    </div>

                    <div role="tabpanel" class="tab-pane" id="tabNames">
                    </div>

                </div>



            </div>


        </div>

    </div>
</div>

