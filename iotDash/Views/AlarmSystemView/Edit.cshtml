@model iotDash.Areas.AlarmSystem.Models.AlarmSystemGlobalEditModel
@using Newtonsoft.Json
@using sconnConnector

@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/toggleswitch")
@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/bundles/numspin")
@Scripts.Render("~/bundles/fancybox")

@Styles.Render("~/bundles/css/toggleswitch")
@Styles.Render("~/bundles/css/numspin")


<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>

<link rel="stylesheet" href="http://code.ionicframework.com/ionicons/1.5.2/css/ionicons.min.css">

<link rel="stylesheet" href="~/Content/css/leaflet.awesome-markers.css">
<script src="~/Scripts/leaflet.awesome-markers.js"></script>


<script src="~/signalr/hubs"></script>


@{
    ViewBag.Title = "Index";
}

@if (Model.Config != null)
{
    <h2>@Model.Config.Name</h2>
}


<script type="text/javascript">

    //signalR
    //$.connection.hub.url = 'http://server1.net/signalr';
    //var server1Hub = $.connection.server1Hub;

    //var connection = $.hubConnection();
    //var hubproxy = connection.createHubProxy('AlarmSystemMapHub');

    //hubproxy.start();
    //var hubModel = jQuery.parseJSON(hubproxy.GetMapEditModel(@Model.ServerId.ToString()));
    //var model = JSON.parse(@JsonConvert.SerializeObject(Model));        // @Html.Raw(Json.Encode(Model))
    //var model = new Object();
    //hubModel.Map = new Object();
    //hubModel.DeviceMapDefinition = [];
    //model.ServerId  = @Model.ServerId.ToString();

    var hubProxy = $.connection.AlarmSystemMapHub;     // the generated client-side hub proxy

    $(function () {

        var hubModel = new Object();
        // Start the connection
        $.connection.hub.start()
            .then(init)
            .then(function () {

            })
            .done(function (state) {
                hubModel =  hubproxy.server.GetMapEditModel(@Model.ServerId.ToString());
            });

        @*$.connection.hub.start().done(function () {
            var hubModel = hubproxy.server.GetMapEditModel(@Model.ServerId.ToString());
        }).fail(function (e) {
            alert(e);
        });*@

        var hubModel = hubproxy.GetMapEditModel(@Model.ServerId.ToString());

        //hubproxy.on('updateDevice', function (deviceData) {
        //    var obj = jQuery.parseJSON(deviceData);
        //    var str = JSON.stringify(obj, undefined, 4);
        //    console.log("Recieved : " + str);
        //});


        var startLat = 49.78395;
        var startLng = 19.05815;

        var mapCenter = [startLat, startLng];
        var map = L.map('map', { center: mapCenter, zoom: 19 });
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            maxZoom: 24,
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
            id: 'domainlocation.map'
        }).addTo(map);


        var greenIcon = L.icon({
            iconUrl: '/Content/img/map-marker.png',
            iconSize: [38, 95], // size of the icon
            iconAnchor: [22, 94], // point of the icon which will correspond to marker's location
            popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
        });

        var LeafIcon = L.Icon.extend({
            options: {
                iconSize: [38, 95],
                iconAnchor: [22, 94],
                popupAnchor: [-3, -76]
            }
        });

        var outputIcon = new LeafIcon({ iconUrl: '/Content/img/mapka1.png' }),
        inputIcon = new LeafIcon({ iconUrl: '/Content/img/mapka2.png' }),
        systemIcon = new LeafIcon({ iconUrl: '/Content/img/mapka3.png' });


        L.icon = function (options) {
            return new L.Icon(options);
        };

        L.marker([49.78531, 19.0542], { icon: outputIcon }).addTo(map).bindPopup("");
        L.marker([49.78221, 19.0522], { icon: inputIcon }).addTo(map).bindPopup("");
        L.marker([49.78221, 19.0532], { icon: systemIcon }).addTo(map).bindPopup("");


        var marker = L.marker([49.78441, 19.0522]).addTo(map);

        var markers = [], // an array containing all the markers added to the map
		markersCount = 0; // the number of the added markers

        // Dragging and dropping the markers to the map
        var addMarkers = function () {

            // The position of the marker icon
            var posTop = $('.draggable-marker').css('top'),
            posLeft = $('.draggable-marker').css('left');

            $('.draggable-marker').draggable({
                stop: function (e, ui) {

                    // returning the icon to the menu
                   // $('.draggable-marker').remove();   //css('top', posTop);
                    $(ui).remove();    //css('left', posLeft);

                    var positionMapX = $("#map").offset().left;
                    var positionMapY = $("#map").offset().top;

                    var coordsX = e.clientX - positionMapX, // 50 is the width of the menu
                        coordsY = e.clientY - positionMapY, // 20 is the half of markers height
                        point = L.point(coordsX, coordsY), // createing a Point object with the given x and y coordinates
                        markerCoords = map.containerPointToLatLng(point), // getting the geographical coordinates of the point

                        // Creating a custom icon
                        myIcon = L.icon({
                            iconUrl: '/Content/img/mapka1.png', // the url of the img
                            iconSize: [20, 40],
                            iconAnchor: [10, 40] // the coordinates of the &amp;amp;quot;tip&amp;amp;quot; of the icon ( in this case must be ( icon width/ 2, icon height )
                        });

                    // Creating a new marker and adding it to the map
                    markers[markersCount] = L.marker([markerCoords.lat, markerCoords.lng], {
                        draggable: true,
                        icon: outputIcon
                    }).addTo(map);

                    var devicemap = new Object();
                    devicemap.IoMapDefinitions =  [];

                    var IoMapDefinition = new Object();
                    IoMapDefinition.Latitude = markerCoords.lat;
                    IoMapDefinition.Longitude = markerCoords.lng;
                    IoMapDefinition.IoId = 0;
                    //model.MapDefinitions.push(IoMapDefinition);
                   // devicemap.IoMapDefinitions.push(IoMapDefinition);
                    //model.Map.DeviceMaps.push(devicemap);
                    model.MapDefinitions.push(IoMapDefinition);

                    markersCount++;
                }
            });
        }
        addMarkers();




        $('#mapsubmit').click(function () {

            hubproxy.PublishMapUpdated();

            @*$.post("@Url.Action("SaveMap")", {model : model}  ,function(data)     //{model : model}   JSON.stringify(model)
            {

            });*@

            @*var jsonObject = {
                "ServerId" : "1",
                "Roles": [{ "RoleName": "Admin", "Description" : "Admin Role"}, { "RoleName": "User", "Description" : "User Role"}]
            };

            $.ajax({
                url: "@Url.Action("SaveMap")",
                type: "POST",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                error: function (response) {
                    alert(response.responseText);
                },
                success: function (response) {
                    alert(response);
                }
            });*@

            @*$.ajax({
                url: '@Url.Action("SaveMap")',
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: {
                    ServerId: JSON.stringify(model.ServerId),
                    MapDefinitions: JSON.stringify(model.MapDefinitions)
                },
                timeout: 5000
            });*@

            @*$.ajax({
                url: '@Url.Action("SaveMap")',
                data: JSON.stringify(model),
                contentType: 'application/json',
                type: "POST",
                dataType: 'json',
                success: function (data) { alert(data); }
            });*@

        });


    });



</script>


<style>
    .awesome-marker i {
        font-size: 18px;
        margin-top: 8px;
    }

    .draggable-marker {
        width: 20px;
        margin: 12px;
        cursor: pointer;
        z-index: 2;
    }


</style>

@functions{

    public string SpanClassForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string DescForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "Armed";
        }
        else
        {
            return "Disarmed";
        }
    }



    public string SpanClassForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string SpanClassForFailureStatusDisplay()
    {
        if (Model.Config.Failure)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string DescForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "Yes";
        }
        else
        {
            return "No";
        }
    }


    public string DescForArmAction()
    {
        if (Model.Config.Armed)
        {
            return "Disarm";
        }
        else
        {
            return "Arm";
        }
    }

}


<div class="container-fluid">

    <div class="row">

        <div class="panel panel-default">
            <div class="panel-heading">
                <center>
                    <h2>Status</h2>
                </center>
            </div>


            <div class="panel-body">

                <div class="row">
                    <table class="table">

                        <tr>
                            <td>Armed</td>
                            <td><span class='@SpanClassForArmStatusDisplay()'>@DescForArmStatusDisplay()</span></td>
                        </tr>

                        <tr>
                            <td>Violation</td>
                            <td><span class='@SpanClassForViolationStatusDisplay()'>@DescForViolationStatusDisplay()</span></td>
                        </tr>

                        <tr>
                            <td>Failure</td>
                            <td><span>@Model.Config.Failure.ToString()</span></td>
                        </tr>

                        <tr>
                            <td>Device Number</td>
                            <td>@Model.Config.Devices</td>
                        </tr>

                        <tr>
                            <td>Zones</td>
                            <td><span>@Model.Config.Zones.ToString()</span></td>
                        </tr>

                        <tr>
                            <td>Latitude</td>
                            <td><span>@Model.Config.Lat.ToString()</span></td>
                        </tr>

                        <tr>
                            <td>Longitude</td>
                            <td><span>@Model.Config.Lng.ToString()</span></td>
                        </tr>

                    </table>

                </div>


                <div class="row">


                    <div class="col-lg-8 col-sm-8 col-xs-12 center-block">
                        <div class="map_container">
                            <div id="map_canvas" class="map_canvas">
                                <div class="form-group">
                                    <div id="map" style="height: 400px">
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="col-lg-4 col-sm-4 col-xs-12 center-block">

                        <ul class="pull-right nav nav-pills nav-stacked right-menu" id="stacked-menu">

                            @foreach (var device in Model.Devices)
                            {
                                <li>
                                    <a href="#" data-target="#stack-menu-device-@device.Id.ToString()" data-toggle="collapse" data-parent="#stacked-menu">Device : @device.Name <span class="caret arrow"></span></a>
                                    <ul class="nav nav-stacked collapse right-submenu" id='stack-menu-device-@device.Id.ToString()'>

                                        <li>
                                            <a href="#" data-target="#input-list-@device.Id.ToString()" data-toggle="collapse" data-parent="#stack-menu-device-@device.Id.ToString()">Inputs<span class="caret arrow"></span></a>
                                            <ul class="nav nav-stacked collapse right-submenu" id="input-list-@device.Id.ToString()">
                                                @foreach (var input in device.Inputs)
                                                {
                                                    <li>
                                                        <span class="draggable-marker poi-type glyphicon glyphicon-log-in">
                                                            @input.Id.ToString() @input.Name
                                                        </span>
                                                        <img id="iomarker-output-@input.Id.ToString()-@device.Id.ToString()" class="draggable-marker" type="tree" src="/Content/img/mapka1.png" alt="marker"/>
                                                    </li>
                                                }
                                            </ul>
                                        </li>

                                        <li>
                                            <a href="#" data-target="#output-list-@device.Id.ToString()" data-toggle="collapse" data-parent="#stack-menu-device-@device.Id.ToString()">Outputs<span class="caret arrow"></span></a>
                                            <ul class="nav nav-stacked collapse right-submenu" id="output-list-@device.Id.ToString()">
                                                @foreach (var output in device.Outputs)
                                                {
                                                    <li>
                                                        <span class="draggable-marker poi-type glyphicon glyphicon-bell">
                                                            @output.Id.ToString() @output.Name
                                                        </span>
                                                        <img id="iomarker-output-@output.Id.ToString()-@device.Id.ToString()" class="draggable-marker" type="tree" src="/Content/img/mapka2.png" alt="marker"/>
                                                    </li>
                                                }
                                            </ul>
                                        </li>

                                        <li>
                                            <a href="#" data-target="#relay-list-@device.Id.ToString()" data-toggle="collapse" data-parent="#stack-menu-device-@device.Id.ToString()">Relays<span class="caret arrow"></span></a>
                                            <ul class="nav nav-stacked collapse right-submenu" id="relay-list-@device.Id.ToString()">
                                                @foreach (var relay in device.Relays)
                                                {
                                                    <li><span class="draggable-marker poi-type glyphicon glyphicon-flash">@relay.Id.ToString() @relay.Name</span>
                                                        <img id="iomarker-output-@relay.Id.ToString()-@device.Id.ToString()" class="draggable-marker" type="tree" src="/Content/img/mapka3.png" alt="marker"/>
                                                    </li>
                                                }
                                            </ul>
                                        </li>

                                    </ul>
                                </li>
                            }

                        </ul>

                        <div class="form-group">
                            <button id="mapsubmit" class="btn btn-primary" type="submit">Save</button>
                        </div>

                    </div>
                </div>


                <div>
                    @using (Html.BeginForm("UploadFirmware", "AlarmSysytemView", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {

                        <div style="position: relative;">
                            <a class='btn btn-primary' href='javascript:;'>
                                Choose File...
                                <input type="file" style='position: absolute; z-index: 2; top: 0; left: 0; filter: alpha(opacity=0); -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)"; opacity: 0; background-color: transparent; color: transparent;' name="file_source" size="40" onchange='$("#upload-file-info").html($(this).val());'>
                            </a>
                            &nbsp;
                            <span class='label label-info' id="upload-file-info"></span>
                        </div>
                        
                        @*<div class="form-group">
                            <span class="btn btn-default btn-file">
                                Browse <input type="file">
                            </span>
                        </div>*@

                        <div class="form-group">
                            <div class="form-group">
                                <button  class="btn btn-primary" type="submit">Send</button>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="progress">
                                Sending...
                                <div class="progress-bar progress-bar-warning progress-bar-striped" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">
                                    60%
                                </div>
                            </div>
                            <div class="progress">
                                Veryfing...
                                <div class="progress-bar progress-bar-warning progress-bar-striped" role="progressbar" aria-valuenow="11" aria-valuemin="0" aria-valuemax="100" style="width: 11%;">
                                    20%
                                </div>
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>

    </div>
</div>