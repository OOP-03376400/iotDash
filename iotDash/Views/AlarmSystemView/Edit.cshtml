@model iotDash.Areas.AlarmSystem.Models.AlarmSystemGlobalEditModel
@using iotDash.Helpers
@using Newtonsoft.Json
@using sconnConnector

@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/toggleswitch")
@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/bundles/numspin")
@Scripts.Render("~/bundles/fancybox")
@Scripts.Render("~/bundles/bootstrap-treeview")
@Scripts.Render("~/bundles/maps")
@Scripts.Render("~/bundles/bootstrap-toggle")

@Styles.Render("~/bundles/css/toggleswitch")
@Styles.Render("~/bundles/css/numspin")
@Styles.Render("~/bundles/css/bootstrap-treeview")
@Styles.Render("~/bundles/css/maps")
@Styles.Render("~/bundles/css/bootstrap-toggle")

<link rel="stylesheet" href="~/Content/css/leaflet.awesome-markers.css">

<script src="~/Scripts/leaflet.awesome-markers.js"></script>



<script src="~/signalr/hubs"></script>

@{
    ViewBag.Title = "Index";
}

@if (Model.Config != null)
{
    <h2>@Model.Config.Name</h2>
}


<script type="text/javascript">

    /*
        !!!!!!!!! ALL HUB OBJECTS START WITH LOWERCASE IN JS !!!!!!!!!!
    */
    var hubModel;
    var hubProxy;

    var startLat;
    var startLng;
    var map;
    var IoIcon;

    var markers = [], // an array containing all the markers added to the map
    markersCount = 0; // the number of the added markers
    
    var mapIoDefninitions = [];
    
    
    function reloadMapCenter() {
        map.panTo(new L.LatLng(startLat, startLng));
    }

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(setMapCenter);
        } else {
        }
    }

    function setMapCenter(position) {
        startLat = position.coords.latitude;
        startLng = position.coords.longitude;
        reloadMapCenter();
    }



    /**************** FILE UPLOAD *************/

    function uploadFile() {
        myApp.showPleaseWait(); //show dialog
        var file = document.getElementById('file_name').files[0];
        var formData = new FormData();
        formdata.append("file_name", file);
        ajax = new XMLHttpRequest();
        ajax.upload.addEventListener("progress", progressHandler, false);
        ajax.addEventListener("load", completeHandler, false);
        ajax.open("POST", "/to/action");
        ajax.send(formdata);
    }

    function progressHandler(event) {
        var percent = (event.loaded / event.total) * 100;
        $('.bar').width(percent); //from bootstrap bar class
    }

    function completeHandler() {
        myApp.hidePleaseWait(); //hide dialog
        $('.bar').width(100);
    }
    
    function parseBool(value) {
        return (typeof value === "undefined") ?
               false :
               // trim using jQuery.trim()'s source 
               value.replace(/^\s+|\s+$/g, "").toLowerCase() === "true";
    }


    $(function () {
        
        hubProxy = $.connection.alarmSystemMapHub;     // the generated client-side hub proxy
        hubProxy.client.updateMap = function (mapData)
        {
            hubModel = mapData;
        }

        $.connection.hub.start().done(function () {
            hubProxy.server.getMapData(@Model.ServerId.ToString());   //intialy load map data
        });

        markers = [];   //reset
        markersCount = 0;
        
        startLat = 49.78395;
        startLng = 19.05815;
        var mapCenter = [startLat, startLng];
        map = L.map('map', { center: mapCenter, zoom: 18 });
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            maxZoom: 24,
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
            id: 'iomap'
        }).addTo(map);

        IoIcon = L.Icon.extend({
            options: {
                iconSize: [50, 50],
                iconAnchor: [25, 25],
                popupAnchor: [-3, -25]
            }
        });

        var outputIcon = new IoIcon({ iconUrl: '/Content/img/markerOutputSmall.png' }),
        inputIcon = new IoIcon({ iconUrl: '/Content/img/markerInputSmall.png' }),
        systemIcon = new IoIcon({ iconUrl: '/Content/img/markerOutputSmall.png' });
        
        var outputIconOff = new IoIcon({ iconUrl: '/Content/img/markerOutputSmallOff.png' }),
         inputIconOff = new IoIcon({ iconUrl: '/Content/img/markerInputSmallOff.png' }),
         systemIconOff = new IoIcon({ iconUrl: '/Content/img/markerOutputSmallOff.png' });
        
        
        var outputIconOn = new IoIcon({ iconUrl: '/Content/img/markerOutputSmallOn.png' }),
         inputIconOn = new IoIcon({ iconUrl: '/Content/img/markerInputSmallOn.png' }),
         systemIconOn = new IoIcon({ iconUrl: '/Content/img/markerOutputSmallOn.png' });

        L.icon = function (options) {
            return new L.Icon(options);
        };


        // Dragging and dropping the markers to the map
        var addMarkers = function () {

            // The position of the marker icon
            var posTop = $('.draggable-marker').css('top'),
            posLeft = $('.draggable-marker').css('left');

            $('.draggable-marker').draggable({
                cancel: false,
                stop: function (e, ui) {

                    var draggableId = $(this).draggable().attr("id");
                    var ioId = $(this).draggable().attr("data-ioid");   
                    var ioType = $(this).draggable().attr("data-iotype");   
                    var ioVal = parseBool($(this).draggable().attr("data-iovalue"));

                    $(this).draggable().remove();   //destroy draggable

                    var positionMapX = $("#map").offset().left - $(window).scrollLeft();
                    var positionMapY = $("#map").offset().top - $(window).scrollTop();

                    var iconIoControllContent = "";

                    var ioIcon;
                    if (draggableId.indexOf('output') > -1) {
                        if (ioVal) {
                            ioIcon = outputIconOn;
                        }
                        else {
                            ioIcon = outputIconOff;
                        }
                        iconIoControllContent = $('#ioCtrlSwitch-'+ioId).html();
                    }
                    else if (draggableId.indexOf('input') > -1) {
                        ioIcon = inputIcon;
                    }
                    else if (draggableId.indexOf('relay') > -1) {
                        ioIcon = outputIcon;
                        iconIoControllContent = $('#ioCtrlSwitch-' + ioId).html();
                    }
                    else {

                    }

                    var coordsX = e.clientX - positionMapX, // 50 is the width of the menu
                        coordsY = e.clientY - positionMapY, // 20 is the half of markers height
                        point = L.point(coordsX, coordsY), // createing a Point object with the given x and y coordinates
                        markerCoords = map.containerPointToLatLng(point); // getting the geographical coordinates of the point

                    var innerPopupContent = "<div>" + ioType + " : " + ioId + "</div> <div>" + iconIoControllContent + "</div>";

                    // Creating a new marker and adding it to the map
                    markers[markersCount] = L.marker([markerCoords.lat, markerCoords.lng], {
                        draggable: true,
                        icon: ioIcon
                    }).addTo(map).bindPopup(innerPopupContent);
                    var ioMapDefinition = new Object();
                    ioMapDefinition.Latitude = markerCoords.lat;
                    ioMapDefinition.Longitude = markerCoords.lng;
                    ioMapDefinition.IoId = ioId;
                    ioMapDefinition.DeviceIoCategory = ioType;
                    ioMapDefinition.ioDeviceId = $(this).draggable().attr("data-deviceid");
                    ioMapDefinition.Marker = markers[markersCount];

                    markersCount++;
                }
            });
        }

        addMarkers();

        $('#mapsubmit').click(function () {
            var devicemap = new Object();
            devicemap.IoMapDefinitions = [];

            //read current possitions for markers and load to adjacent data structs
            for (i = 0, len = mapIoDefninitions.length; i < len; i++) {
                var iodef = mapIoDefninitions[i];
                iodef.Latitude = iodef.Marker.lat;
                iodef.Longitude = iodef.Marker.lng;
                var DevId = iodef.ioDeviceId;

                devicemap.IoMapDefinitions.push(iodef);
                markers = markers.splice(i, 1);

                //load all io definitions for current device from markers
                for (j = i+1, len = markers.length; j < len; j++) {
                    var nmarker = markers[j];
                    if (markers[j].ioMapDefinition.ioDeviceId == DevId) {
                        var iodefn = mapIoDefninitions[j];
                        iodef.Latitude = iodef.Marker.lat;
                        iodef.Longitude = iodef.Marker.lng;
                        devicemap.IoMapDefinitions.push(iodefn);
                            markers = markers.splice(j, 1);
                    }
                }
                i--;
            }
            hubModel.Map.DeviceMaps.push(devicemap);

            hubProxy.server.updateAlarmMap(hubModel);
        });

        

        getLocation();  //async get location
        
        $('.iomenutoggle').on('click', function (e) {
            e.preventDefault();
        });
        
        
        var MapMarkerFromData = function (ioMapDefinition) {
            
            ioMapDefinition.Latitude = markerCoords.lat;
            ioMapDefinition.Longitude = markerCoords.lng;
            ioMapDefinition.IoId = ioId;
            ioMapDefinition.DeviceIoCategory = ioType;
            ioMapDefinition.ioDeviceId = $(this).draggable().attr("data-deviceid");

            var draggableId = ioMapDefinition.IoId; 
            var ioId = ioMapDefinition.IoId;   
            var ioType = ioMapDefinition.DeviceIoCategory; 
            var ioVal = parseBool($(this).draggable().attr("data-iovalue"));

            var positionMapX = $("#map").offset().left - $(window).scrollLeft();
            var positionMapY = $("#map").offset().top - $(window).scrollTop();
            var iconIoControllContent = "";

            var ioIcon;
            if (ioType == 1) {
                if (ioVal) {
                    ioIcon = outputIconOn;
                }
                else {
                    ioIcon = outputIconOff;
                }
                iconIoControllContent = $('#ioCtrlSwitch-' + ioId).html();
            }
            else if (ioType == 2) {
                ioIcon = inputIcon;
            }
            else if (ioType==3) {
                ioIcon = outputIcon;
                iconIoControllContent = $('#ioCtrlSwitch-' + ioId).html();
            }

            point = L.point(ioMapDefinition.Latitude, ioMapDefinition.Longitude), // createing a Point object with the given x and y coordinates
            markerCoords = map.containerPointToLatLng(point); // getting the geographical coordinates of the point
            var innerPopupContent = "<div>" + ioType + " : " + ioId + "</div> <div>" + iconIoControllContent + "</div>";

            // Creating a new marker and adding it to the map
            markers[markersCount] = L.marker([markerCoords.lat, markerCoords.lng], {
                draggable: true,
                icon: ioIcon
            }).addTo(map).bindPopup(innerPopupContent);

        };

        //$(document).on('click', '.nav.in', function (e) {
        //    if ($(e.target).is('a') && $(e.target).attr('class') != 'dropdown-toggle') {
        //        $(this).collapse('hide');
        //    }
        //})

    });



</script>


@functions{

    public string SpanClassForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string DescForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "Armed";
        }
        else
        {
            return "Disarmed";
        }
    }



    public string SpanClassForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string SpanClassForFailureStatusDisplay()
    {
        if (Model.Config.Failure)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string DescForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "Yes";
        }
        else
        {
            return "No";
        }
    }


    public string DescForArmAction()
    {
        if (Model.Config.Armed)
        {
            return "Disarm";
        }
        else
        {
            return "Arm";
        }
    }

}


<div class="container-fluid">

    <div class="row">

        <div class="panel panel-default">
            <div class="panel-heading">
                <center>
                    <h2>Status</h2>
                </center>
            </div>


            <div class="panel-body">

                <div class="row">
                    <table class="table">

                        <tr>
                            <td>Armed</td>
                            <td><span class='@SpanClassForArmStatusDisplay()'>@DescForArmStatusDisplay()</span></td>
                        </tr>

                        <tr>
                            <td>Violation</td>
                            <td><span class='@SpanClassForViolationStatusDisplay()'>@DescForViolationStatusDisplay()</span></td>
                        </tr>

                        <tr>
                            <td>Failure</td>
                            <td><span>@Model.Config.Failure.ToString()</span></td>
                        </tr>

                        <tr>
                            <td>Device Number</td>
                            <td>@Model.Config.Devices</td>
                        </tr>

                        <tr>
                            <td>Zones</td>
                            <td><span>@Model.Config.Zones.ToString()</span></td>
                        </tr>

                        <tr>
                            <td>Latitude</td>
                            <td><span>@Model.Config.Lat.ToString()</span></td>
                        </tr>

                        <tr>
                            <td>Longitude</td>
                            <td><span>@Model.Config.Lng.ToString()</span></td>
                        </tr>

                    </table>

                </div>


                <div class="row">


                    <div class="col-lg-8 col-sm-8 col-xs-12 center-block">
                        <div class="map_container">
                            <div id="map_canvas" class="map_canvas">
                                <div class="form-group">
                                    <div id="map" style="height: 400px">
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <style>
                        .iomenuItem {
                            background-color: aqua;
                        }
                    </style>

                    <div class="col-lg-4 col-sm-4 col-xs-12 center-block">

                        <ul class="pull-right nav nav-pills nav-stacked right-menu" id="stacked-menu">

                            @foreach (var device in Model.Devices)
                            {
                                <li>
                                    <a href="#" class="btn btn-primary" data-target="#stack-menu-device-@device.Id.ToString()" data-toggle="collapse" data-parent="#stacked-menu">Device : @device.Name <span class="caret arrow"></span></a>   @*iomenutoggle*@
                                    <ul class="nav nav-stacked collapse right-submenu iomenutoggle" id='stack-menu-device-@device.Id.ToString()'>

                                        <li>
                                            <a class="btn btn-primary" href="#" data-target="#input-list-@device.Id.ToString()" data-toggle="collapse" data-parent="#stack-menu-device-@device.Id.ToString()">Inputs<span class="caret arrow"></span></a>
                                            <ul class="nav nav-stacked collapse right-submenu" id="input-list-@device.Id.ToString()">
                                                @foreach (var input in device.Inputs)
                                                {
                                                    <li>
                                                        <a class="btn btn-primary draggable-marker" style="width : 100%;" draggable="true" href="#" id="iomarker-input-@input.Id.ToString()-@device.Id.ToString()" data-iovalue="@input.Value.ToString()" data-deviceid="@device.Id.ToString()" data-ioid="@input.Id.ToString()" data-iotype="@input.Type.ToString()" src="/Content/img/mapka2.png">
                                                            <span class="glyphicon glyphicon-log-in"></span>
                                                            @input.Id.ToString() @input.Name
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </li>

                                        <li>
                                            <a class="btn btn-primary" href="#" data-target="#output-list-@device.Id.ToString()" data-toggle="collapse" data-parent="#stack-menu-device-@device.Id.ToString()">Outputs<span class="caret arrow"></span></a>
                                            <ul class="nav nav-stacked collapse right-submenu" id="output-list-@device.Id.ToString()">
                                                @foreach (var output in device.Outputs)
                                                {
                                                    <li>
                                                        <a class="btn btn-primary draggable-marker" style="width: 100%;" draggable="true" href="#" id="iomarker-output-@output.Id.ToString()-@device.Id.ToString()" data-iovalue="@output.Value.ToString()" data-deviceid="@device.Id.ToString()" data-ioid="@output.Id.ToString()" data-iotype="@output.Type.ToString()">
                                                            <span class="glyphicon glyphicon-flash"></span>
                                                            @output.Id.ToString() @output.Name
                                                        </a>
                                                        <div id="ioCtrlSwitch-@output.Id.ToString()" class="checkbox" style="display: none;">
                                                            @Html.ToggleSwitchFor(model => output.Value)
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </li>

                                        <li>
                                            <a href="#" class="btn btn-primary" style="width : 100%;" data-target="#relay-list-@device.Id.ToString()" data-toggle="collapse" data-parent="#stack-menu-device-@device.Id.ToString()">Relays<span class="caret arrow"></span></a>
                                            <ul class="nav nav-stacked collapse right-submenu" id="relay-list-@device.Id.ToString()">
                                                @foreach (var relay in device.Relays)
                                                {
                                                    <li>
                                                        <a class="btn btn-primary draggable-marker" draggable="true" href="#" id="iomarker-relay-@relay.Id.ToString()-@device.Id.ToString()" data-iovalue="@relay.Value.ToString()" data-deviceid="@device.Id.ToString()" data-ioid="@relay.Id.ToString()" data-iotype="@relay.Type.ToString()">
                                                            <span class="glyphicon glyphicon-flash"></span>
                                                            @relay.Id.ToString() @relay.Name
                                                        </a>
                                                        <div id="ioCtrlSwitch-@relay.Id.ToString()" class="checkbox" style="display: none;">
                                                            @Html.ToggleSwitchFor(model => relay.Value)
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </li>

                                    </ul>
                                </li>
                            }

                        </ul>

                        <div class="form-group">
                            <button id="mapsubmit" class="btn btn-primary" type="submit">Save</button>
                        </div>

                    </div>
                </div>


            </div>
        </div>

    </div>

    <div class="row">

        <div class="panel panel-default">
            <div class="panel-heading">
                <center>
                    <h2>Firmware upload</h2>
                </center>
            </div>


            <div class="panel-body">
                @using (Html.BeginForm("Upload", "AlarmSystemView", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {

                    <div class="form-group" style="position: relative;">
                        <a class='btn btn-primary' href='javascript:;'>
                            Choose File...
                            <input type="file" style='position: absolute; z-index: 2; top: 0; left: 0; filter: alpha(opacity=0); -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)"; opacity: 0; background-color: transparent; color: transparent;' name="file_source" size="40" onchange='$("#upload-file-info").html($(this).val());'>
                        </a>
                        &nbsp;
                        <span class='label label-info' id="upload-file-info"></span>
                    </div>

                        <div class="form-group">
                            <div class="form-group">
                                <button class="btn btn-primary" type="submit">Send</button>
                            </div>
                        </div>

                    <div class="form-group">
                        Sending...
                        <div class="progress">
                            <div class="progress-bar progress-bar-succcess" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;">
                                100%
                            </div>
                        </div>
                    </div>

                        <div class="form-group">
                            Veryfing...
                            <div class="progress">

                                <div class="progress-bar progress-bar-warning progress-bar-striped" role="progressbar" aria-valuenow="11" aria-valuemin="0" aria-valuemax="100" style="width: 11%;">
                                    20%
                                </div>
                            </div>
                        </div>
                }
            </div>

        </div>

    </div>



</div>